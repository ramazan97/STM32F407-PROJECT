
005_5_HAL_MULTI_ADC_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000224c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080023d4  080023d4  000123d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023e4  080023e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080023e4  080023e4  000123e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080023ec  080023ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023f0  080023f0  000123f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08002400  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08002400  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006a39  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014ef  00000000  00000000  00026a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000598  00000000  00000000  00027f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00028500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002038d  00000000  00000000  000289f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e3d  00000000  00000000  00048d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8c15  00000000  00000000  0004fbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001187cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001534  00000000  00000000  00118824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080023bc 	.word	0x080023bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080023bc 	.word	0x080023bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if(__HAL_ADC_GET_FLAG(&hadc1, ADC_FLAG_EOC) != RESET)//EĞER HADC1 İÇİN İNTERRUPA GİRDİYSEM BURAYA GİRECEM
 80004c8:	4b49      	ldr	r3, [pc, #292]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x130>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	f003 0302 	and.w	r3, r3, #2
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d160      	bne.n	8000598 <HAL_ADC_ConvCpltCallback+0xd8>
	{
		adc1_value[count] = HAL_ADC_GetValue(&hadc1);
 80004d6:	4846      	ldr	r0, [pc, #280]	; (80005f0 <HAL_ADC_ConvCpltCallback+0x130>)
 80004d8:	f000 fe0d 	bl	80010f6 <HAL_ADC_GetValue>
 80004dc:	4602      	mov	r2, r0
 80004de:	4b45      	ldr	r3, [pc, #276]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x134>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	b291      	uxth	r1, r2
 80004e4:	4a44      	ldr	r2, [pc, #272]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x138>)
 80004e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		count++;
 80004ea:	4b42      	ldr	r3, [pc, #264]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x134>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	3301      	adds	r3, #1
 80004f0:	4a40      	ldr	r2, [pc, #256]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x134>)
 80004f2:	6013      	str	r3, [r2, #0]
		/*
		 * 		count = 0 => channel 0
		 * 		count = 1 => vrefint channel
		 * 		count = 2 => temperature channel
		 */
		if(count == 3)
 80004f4:	4b3f      	ldr	r3, [pc, #252]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x134>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b03      	cmp	r3, #3
 80004fa:	d102      	bne.n	8000502 <HAL_ADC_ConvCpltCallback+0x42>
			count = 0;
 80004fc:	4b3d      	ldr	r3, [pc, #244]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x134>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]

		Vdda = (float) 3.3 * (*VREFIN_CAL) / adc1_value[1];
 8000502:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <HAL_ADC_ConvCpltCallback+0x13c>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	ee07 3a90 	vmov	s15, r3
 800050a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800050e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000600 <HAL_ADC_ConvCpltCallback+0x140>
 8000512:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x138>)
 8000518:	885b      	ldrh	r3, [r3, #2]
 800051a:	ee07 3a90 	vmov	s15, r3
 800051e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000522:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000526:	4b37      	ldr	r3, [pc, #220]	; (8000604 <HAL_ADC_ConvCpltCallback+0x144>)
 8000528:	edc3 7a00 	vstr	s15, [r3]
		Vadc1 = Vdda * adc1_value[0] /4095;
 800052c:	4b32      	ldr	r3, [pc, #200]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x138>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	ee07 3a90 	vmov	s15, r3
 8000534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000538:	4b32      	ldr	r3, [pc, #200]	; (8000604 <HAL_ADC_ConvCpltCallback+0x144>)
 800053a:	edd3 7a00 	vldr	s15, [r3]
 800053e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000542:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000608 <HAL_ADC_ConvCpltCallback+0x148>
 8000546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800054a:	4b30      	ldr	r3, [pc, #192]	; (800060c <HAL_ADC_ConvCpltCallback+0x14c>)
 800054c:	edc3 7a00 	vstr	s15, [r3]
		Vsense = Vdda * adc1_value[2] / 4095;
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x138>)
 8000552:	889b      	ldrh	r3, [r3, #4]
 8000554:	ee07 3a90 	vmov	s15, r3
 8000558:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <HAL_ADC_ConvCpltCallback+0x144>)
 800055e:	edd3 7a00 	vldr	s15, [r3]
 8000562:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000566:	eddf 6a28 	vldr	s13, [pc, #160]	; 8000608 <HAL_ADC_ConvCpltCallback+0x148>
 800056a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <HAL_ADC_ConvCpltCallback+0x150>)
 8000570:	edc3 7a00 	vstr	s15, [r3]

		temperature = ((Vsense - V25) / Avg_slope)+ 25;
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <HAL_ADC_ConvCpltCallback+0x150>)
 8000576:	edd3 7a00 	vldr	s15, [r3]
 800057a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000614 <HAL_ADC_ConvCpltCallback+0x154>
 800057e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000582:	eddf 6a25 	vldr	s13, [pc, #148]	; 8000618 <HAL_ADC_ConvCpltCallback+0x158>
 8000586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800058a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800058e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <HAL_ADC_ConvCpltCallback+0x15c>)
 8000594:	edc3 7a00 	vstr	s15, [r3]
	}
	if(__HAL_ADC_GET_FLAG(&hadc2, ADC_FLAG_EOC) != RESET)//EĞER HADC2 İÇİN İNTTREUPA GİRDİYSEM BURAYA GİRECEM
 8000598:	4b21      	ldr	r3, [pc, #132]	; (8000620 <HAL_ADC_ConvCpltCallback+0x160>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d120      	bne.n	80005e8 <HAL_ADC_ConvCpltCallback+0x128>
	{
		adc1_value[count] = HAL_ADC_GetValue(&hadc2);
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <HAL_ADC_ConvCpltCallback+0x160>)
 80005a8:	f000 fda5 	bl	80010f6 <HAL_ADC_GetValue>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x134>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b291      	uxth	r1, r2
 80005b4:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <HAL_ADC_ConvCpltCallback+0x138>)
 80005b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		count++;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x134>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3301      	adds	r3, #1
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <HAL_ADC_ConvCpltCallback+0x134>)
 80005c2:	6013      	str	r3, [r2, #0]

		Vadc2 = Vdda * adc2_value /4095;
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_ADC_ConvCpltCallback+0x164>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	ee07 3a90 	vmov	s15, r3
 80005cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_ADC_ConvCpltCallback+0x144>)
 80005d2:	edd3 7a00 	vldr	s15, [r3]
 80005d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005da:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000608 <HAL_ADC_ConvCpltCallback+0x148>
 80005de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <HAL_ADC_ConvCpltCallback+0x168>)
 80005e4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000088 	.word	0x20000088
 80005f4:	2000003c 	.word	0x2000003c
 80005f8:	200000d0 	.word	0x200000d0
 80005fc:	1fff7a2a 	.word	0x1fff7a2a
 8000600:	40533333 	.word	0x40533333
 8000604:	20000034 	.word	0x20000034
 8000608:	457ff000 	.word	0x457ff000
 800060c:	20000028 	.word	0x20000028
 8000610:	20000030 	.word	0x20000030
 8000614:	3f428f5c 	.word	0x3f428f5c
 8000618:	3b23d70a 	.word	0x3b23d70a
 800061c:	20000038 	.word	0x20000038
 8000620:	20000040 	.word	0x20000040
 8000624:	200000d6 	.word	0x200000d6
 8000628:	2000002c 	.word	0x2000002c

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fa8c 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f812 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f93a 	bl	80008b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800063c:	f000 f878 	bl	8000730 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000640:	f000 f8e4 	bl	800080c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000644:	4803      	ldr	r0, [pc, #12]	; (8000654 <main+0x28>)
 8000646:	f000 fb37 	bl	8000cb8 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <main+0x2c>)
 800064c:	f000 fb34 	bl	8000cb8 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x24>
 8000652:	bf00      	nop
 8000654:	20000088 	.word	0x20000088
 8000658:	20000040 	.word	0x20000040

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	2230      	movs	r2, #48	; 0x30
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fe9e 	bl	80023ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	4b28      	ldr	r3, [pc, #160]	; (8000728 <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a27      	ldr	r2, [pc, #156]	; (8000728 <SystemClock_Config+0xcc>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b25      	ldr	r3, [pc, #148]	; (8000728 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b22      	ldr	r3, [pc, #136]	; (800072c <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a21      	ldr	r2, [pc, #132]	; (800072c <SystemClock_Config+0xd0>)
 80006a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	; (800072c <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b8:	2302      	movs	r3, #2
 80006ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c0:	2310      	movs	r3, #16
 80006c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d0:	23a8      	movs	r3, #168	; 0xa8
 80006d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f9ff 	bl	8001ae4 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006ec:	f000 f908 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2105      	movs	r1, #5
 800070e:	4618      	mov	r0, r3
 8000710:	f001 fc60 	bl	8001fd4 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071a:	f000 f8f1 	bl	8000900 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	463b      	mov	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000742:	4b2f      	ldr	r3, [pc, #188]	; (8000800 <MX_ADC1_Init+0xd0>)
 8000744:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <MX_ADC1_Init+0xd4>)
 8000746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_ADC1_Init+0xd0>)
 800074a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800074e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_ADC1_Init+0xd0>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_ADC1_Init+0xd0>)
 8000758:	2201      	movs	r2, #1
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_ADC1_Init+0xd0>)
 800075e:	2201      	movs	r2, #1
 8000760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_ADC1_Init+0xd0>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_ADC1_Init+0xd0>)
 800076c:	2200      	movs	r2, #0
 800076e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_ADC1_Init+0xd0>)
 8000772:	4a25      	ldr	r2, [pc, #148]	; (8000808 <MX_ADC1_Init+0xd8>)
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_ADC1_Init+0xd0>)
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_ADC1_Init+0xd0>)
 800077e:	2203      	movs	r2, #3
 8000780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_ADC1_Init+0xd0>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_ADC1_Init+0xd0>)
 800078c:	2201      	movs	r2, #1
 800078e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000790:	481b      	ldr	r0, [pc, #108]	; (8000800 <MX_ADC1_Init+0xd0>)
 8000792:	f000 fa4d 	bl	8000c30 <HAL_ADC_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800079c:	f000 f8b0 	bl	8000900 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80007a8:	2303      	movs	r3, #3
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4813      	ldr	r0, [pc, #76]	; (8000800 <MX_ADC1_Init+0xd0>)
 80007b2:	f000 fcc1 	bl	8001138 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007bc:	f000 f8a0 	bl	8000900 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80007c0:	2311      	movs	r3, #17
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007c4:	2302      	movs	r3, #2
 80007c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_ADC1_Init+0xd0>)
 80007ce:	f000 fcb3 	bl	8001138 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007d8:	f000 f892 	bl	8000900 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007dc:	2310      	movs	r3, #16
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80007e0:	2303      	movs	r3, #3
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	4619      	mov	r1, r3
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_ADC1_Init+0xd0>)
 80007ea:	f000 fca5 	bl	8001138 <HAL_ADC_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80007f4:	f000 f884 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000088 	.word	0x20000088
 8000804:	40012000 	.word	0x40012000
 8000808:	0f000001 	.word	0x0f000001

0800080c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800081e:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_ADC2_Init+0x98>)
 8000820:	4a21      	ldr	r2, [pc, #132]	; (80008a8 <MX_ADC2_Init+0x9c>)
 8000822:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_ADC2_Init+0x98>)
 8000826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800082a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800082c:	4b1d      	ldr	r3, [pc, #116]	; (80008a4 <MX_ADC2_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000832:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_ADC2_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_ADC2_Init+0x98>)
 800083a:	2201      	movs	r2, #1
 800083c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_ADC2_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000846:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_ADC2_Init+0x98>)
 8000848:	2200      	movs	r2, #0
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <MX_ADC2_Init+0x98>)
 800084e:	4a17      	ldr	r2, [pc, #92]	; (80008ac <MX_ADC2_Init+0xa0>)
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_ADC2_Init+0x98>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_ADC2_Init+0x98>)
 800085a:	2201      	movs	r2, #1
 800085c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_ADC2_Init+0x98>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_ADC2_Init+0x98>)
 8000868:	2201      	movs	r2, #1
 800086a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_ADC2_Init+0x98>)
 800086e:	f000 f9df 	bl	8000c30 <HAL_ADC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000878:	f000 f842 	bl	8000900 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800087c:	2301      	movs	r3, #1
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000880:	2301      	movs	r3, #1
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000884:	2303      	movs	r3, #3
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000888:	463b      	mov	r3, r7
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_ADC2_Init+0x98>)
 800088e:	f000 fc53 	bl	8001138 <HAL_ADC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000898:	f000 f832 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000040 	.word	0x20000040
 80008a8:	40012100 	.word	0x40012100
 80008ac:	0f000001 	.word	0x0f000001

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_GPIO_Init+0x4c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <MX_GPIO_Init+0x4c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_GPIO_Init+0x4c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_GPIO_Init+0x4c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <MX_GPIO_Init+0x4c>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_GPIO_Init+0x4c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	e7fe      	b.n	8000908 <Error_Handler+0x8>
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	; (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	; 0x30
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a36      	ldr	r2, [pc, #216]	; (8000a54 <HAL_ADC_MspInit+0xf8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d130      	bne.n	80009e0 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
 8000982:	4b35      	ldr	r3, [pc, #212]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098c:	6453      	str	r3, [r2, #68]	; 0x44
 800098e:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a2d      	ldr	r2, [pc, #180]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b6:	2301      	movs	r3, #1
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4824      	ldr	r0, [pc, #144]	; (8000a5c <HAL_ADC_MspInit+0x100>)
 80009ca:	f000 feef 	bl	80017ac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2012      	movs	r0, #18
 80009d4:	f000 feb3 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009d8:	2012      	movs	r0, #18
 80009da:	f000 fecc 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80009de:	e034      	b.n	8000a4a <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <HAL_ADC_MspInit+0x104>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12f      	bne.n	8000a4a <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 80009f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_ADC_MspInit+0xfc>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <HAL_ADC_MspInit+0x100>)
 8000a36:	f000 feb9 	bl	80017ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2012      	movs	r0, #18
 8000a40:	f000 fe7d 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000a44:	2012      	movs	r0, #18
 8000a46:	f000 fe96 	bl	8001776 <HAL_NVIC_EnableIRQ>
}
 8000a4a:	bf00      	nop
 8000a4c:	3730      	adds	r7, #48	; 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40012000 	.word	0x40012000
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020000 	.word	0x40020000
 8000a60:	40012100 	.word	0x40012100

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab0:	f000 f89e 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000abc:	4803      	ldr	r0, [pc, #12]	; (8000acc <ADC_IRQHandler+0x14>)
 8000abe:	f000 f9d9 	bl	8000e74 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <ADC_IRQHandler+0x18>)
 8000ac4:	f000 f9d6 	bl	8000e74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000088 	.word	0x20000088
 8000ad0:	20000040 	.word	0x20000040

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	; (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b22:	f7ff ffd7 	bl	8000ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f001 fc1d 	bl	8002364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fd7f 	bl	800062c <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b3c:	080023f4 	.word	0x080023f4
  ldr r2, =_sbss
 8000b40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b44:	200000dc 	.word	0x200000dc

08000b48 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <CAN1_RX0_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 fdd7 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fec4 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fdef 	bl	8001792 <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 fdb7 	bl	800173e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	200000d8 	.word	0x200000d8

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200000d8 	.word	0x200000d8

08000c30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e033      	b.n	8000cae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d109      	bne.n	8000c62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fe84 	bl	800095c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2200      	movs	r2, #0
 8000c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d118      	bne.n	8000ca0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c76:	f023 0302 	bic.w	r3, r3, #2
 8000c7a:	f043 0202 	orr.w	r2, r3, #2
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 fb7a 	bl	800137c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9e:	e001      	b.n	8000ca4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d101      	bne.n	8000cd2 <HAL_ADC_Start_IT+0x1a>
 8000cce:	2302      	movs	r3, #2
 8000cd0:	e0bd      	b.n	8000e4e <HAL_ADC_Start_IT+0x196>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d018      	beq.n	8000d1a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	689a      	ldr	r2, [r3, #8]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f042 0201 	orr.w	r2, r2, #1
 8000cf6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cf8:	4b58      	ldr	r3, [pc, #352]	; (8000e5c <HAL_ADC_Start_IT+0x1a4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a58      	ldr	r2, [pc, #352]	; (8000e60 <HAL_ADC_Start_IT+0x1a8>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	0c9a      	lsrs	r2, r3, #18
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d0c:	e002      	b.n	8000d14 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f9      	bne.n	8000d0e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	f040 8085 	bne.w	8000e34 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d32:	f023 0301 	bic.w	r3, r3, #1
 8000d36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d007      	beq.n	8000d5c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d68:	d106      	bne.n	8000d78 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f023 0206 	bic.w	r2, r3, #6
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	645a      	str	r2, [r3, #68]	; 0x44
 8000d76:	e002      	b.n	8000d7e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d86:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <HAL_ADC_Start_IT+0x1ac>)
 8000d88:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d92:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	6812      	ldr	r2, [r2, #0]
 8000d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da2:	f043 0320 	orr.w	r3, r3, #32
 8000da6:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 031f 	and.w	r3, r3, #31
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d12a      	bne.n	8000e0a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a2b      	ldr	r2, [pc, #172]	; (8000e68 <HAL_ADC_Start_IT+0x1b0>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d015      	beq.n	8000dea <HAL_ADC_Start_IT+0x132>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a2a      	ldr	r2, [pc, #168]	; (8000e6c <HAL_ADC_Start_IT+0x1b4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d105      	bne.n	8000dd4 <HAL_ADC_Start_IT+0x11c>
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_ADC_Start_IT+0x1ac>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 031f 	and.w	r3, r3, #31
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d00a      	beq.n	8000dea <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a25      	ldr	r2, [pc, #148]	; (8000e70 <HAL_ADC_Start_IT+0x1b8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d136      	bne.n	8000e4c <HAL_ADC_Start_IT+0x194>
 8000dde:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_ADC_Start_IT+0x1ac>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0310 	and.w	r3, r3, #16
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d130      	bne.n	8000e4c <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d129      	bne.n	8000e4c <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	689a      	ldr	r2, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	e020      	b.n	8000e4c <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_ADC_Start_IT+0x1b0>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d11b      	bne.n	8000e4c <HAL_ADC_Start_IT+0x194>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d114      	bne.n	8000e4c <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	e00b      	b.n	8000e4c <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f043 0210 	orr.w	r2, r3, #16
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e44:	f043 0201 	orr.w	r2, r3, #1
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3714      	adds	r7, #20
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	431bde83 	.word	0x431bde83
 8000e64:	40012300 	.word	0x40012300
 8000e68:	40012000 	.word	0x40012000
 8000e6c:	40012100 	.word	0x40012100
 8000e70:	40012200 	.word	0x40012200

08000e74 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0320 	and.w	r3, r3, #32
 8000ea4:	2b20      	cmp	r3, #32
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d049      	beq.n	8000f4a <HAL_ADC_IRQHandler+0xd6>
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d046      	beq.n	8000f4a <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d12b      	bne.n	8000f3a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d127      	bne.n	8000f3a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d119      	bne.n	8000f3a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0220 	bic.w	r2, r2, #32
 8000f14:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d105      	bne.n	8000f3a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fac0 	bl	80004c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f06f 0212 	mvn.w	r2, #18
 8000f48:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f6a:	2b80      	cmp	r3, #128	; 0x80
 8000f6c:	bf0c      	ite	eq
 8000f6e:	2301      	moveq	r3, #1
 8000f70:	2300      	movne	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d057      	beq.n	800102c <HAL_ADC_IRQHandler+0x1b8>
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d054      	beq.n	800102c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d139      	bne.n	800101c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d006      	beq.n	8000fc4 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d12b      	bne.n	800101c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d124      	bne.n	800101c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d11d      	bne.n	800101c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d119      	bne.n	800101c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ff6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d105      	bne.n	800101c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f043 0201 	orr.w	r2, r3, #1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 faa9 	bl	8001574 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f06f 020c 	mvn.w	r2, #12
 800102a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b01      	cmp	r3, #1
 8001038:	bf0c      	ite	eq
 800103a:	2301      	moveq	r3, #1
 800103c:	2300      	movne	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800104c:	2b40      	cmp	r3, #64	; 0x40
 800104e:	bf0c      	ite	eq
 8001050:	2301      	moveq	r3, #1
 8001052:	2300      	movne	r3, #0
 8001054:	b2db      	uxtb	r3, r3
 8001056:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d017      	beq.n	800108e <HAL_ADC_IRQHandler+0x21a>
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d014      	beq.n	800108e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b01      	cmp	r3, #1
 8001070:	d10d      	bne.n	800108e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f846 	bl	8001110 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f06f 0201 	mvn.w	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0320 	and.w	r3, r3, #32
 8001098:	2b20      	cmp	r3, #32
 800109a:	bf0c      	ite	eq
 800109c:	2301      	moveq	r3, #1
 800109e:	2300      	movne	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010b2:	bf0c      	ite	eq
 80010b4:	2301      	moveq	r3, #1
 80010b6:	2300      	movne	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d015      	beq.n	80010ee <HAL_ADC_IRQHandler+0x27a>
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d012      	beq.n	80010ee <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010cc:	f043 0202 	orr.w	r2, r3, #2
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f06f 0220 	mvn.w	r2, #32
 80010dc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 f820 	bl	8001124 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f06f 0220 	mvn.w	r2, #32
 80010ec:	601a      	str	r2, [r3, #0]
  }
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800114c:	2b01      	cmp	r3, #1
 800114e:	d101      	bne.n	8001154 <HAL_ADC_ConfigChannel+0x1c>
 8001150:	2302      	movs	r3, #2
 8001152:	e105      	b.n	8001360 <HAL_ADC_ConfigChannel+0x228>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b09      	cmp	r3, #9
 8001162:	d925      	bls.n	80011b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68d9      	ldr	r1, [r3, #12]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	3b1e      	subs	r3, #30
 800117a:	2207      	movs	r2, #7
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43da      	mvns	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	400a      	ands	r2, r1
 8001188:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68d9      	ldr	r1, [r3, #12]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	4603      	mov	r3, r0
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4403      	add	r3, r0
 80011a2:	3b1e      	subs	r3, #30
 80011a4:	409a      	lsls	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	430a      	orrs	r2, r1
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	e022      	b.n	80011f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6919      	ldr	r1, [r3, #16]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	461a      	mov	r2, r3
 80011be:	4613      	mov	r3, r2
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	2207      	movs	r2, #7
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	400a      	ands	r2, r1
 80011d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6919      	ldr	r1, [r3, #16]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	4603      	mov	r3, r0
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4403      	add	r3, r0
 80011ec:	409a      	lsls	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d824      	bhi.n	8001248 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b05      	subs	r3, #5
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43da      	mvns	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	400a      	ands	r2, r1
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	b29b      	uxth	r3, r3
 800122c:	4618      	mov	r0, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	3b05      	subs	r3, #5
 800123a:	fa00 f203 	lsl.w	r2, r0, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
 8001246:	e04c      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b0c      	cmp	r3, #12
 800124e:	d824      	bhi.n	800129a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b23      	subs	r3, #35	; 0x23
 8001262:	221f      	movs	r2, #31
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43da      	mvns	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	400a      	ands	r2, r1
 8001270:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	3b23      	subs	r3, #35	; 0x23
 800128c:	fa00 f203 	lsl.w	r2, r0, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
 8001298:	e023      	b.n	80012e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	3b41      	subs	r3, #65	; 0x41
 80012ac:	221f      	movs	r2, #31
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43da      	mvns	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	400a      	ands	r2, r1
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	3b41      	subs	r3, #65	; 0x41
 80012d6:	fa00 f203 	lsl.w	r2, r0, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_ADC_ConfigChannel+0x234>)
 80012e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <HAL_ADC_ConfigChannel+0x238>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d109      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x1cc>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b12      	cmp	r3, #18
 80012f6:	d105      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <HAL_ADC_ConfigChannel+0x238>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d123      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x21e>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b10      	cmp	r3, #16
 8001314:	d003      	beq.n	800131e <HAL_ADC_ConfigChannel+0x1e6>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b11      	cmp	r3, #17
 800131c:	d11b      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b10      	cmp	r3, #16
 8001330:	d111      	bne.n	8001356 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <HAL_ADC_ConfigChannel+0x23c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_ADC_ConfigChannel+0x240>)
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0c9a      	lsrs	r2, r3, #18
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001348:	e002      	b.n	8001350 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	3b01      	subs	r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f9      	bne.n	800134a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40012300 	.word	0x40012300
 8001370:	40012000 	.word	0x40012000
 8001374:	20000000 	.word	0x20000000
 8001378:	431bde83 	.word	0x431bde83

0800137c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001384:	4b79      	ldr	r3, [pc, #484]	; (800156c <ADC_Init+0x1f0>)
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	431a      	orrs	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6899      	ldr	r1, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	4a58      	ldr	r2, [pc, #352]	; (8001570 <ADC_Init+0x1f4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d022      	beq.n	800145a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001422:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6899      	ldr	r1, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e00f      	b.n	800147a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001478:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0202 	bic.w	r2, r2, #2
 8001488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6899      	ldr	r1, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7e1b      	ldrb	r3, [r3, #24]
 8001494:	005a      	lsls	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6859      	ldr	r1, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	3b01      	subs	r3, #1
 80014d4:	035a      	lsls	r2, r3, #13
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	e007      	b.n	80014f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	3b01      	subs	r3, #1
 800150c:	051a      	lsls	r2, r3, #20
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6899      	ldr	r1, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001532:	025a      	lsls	r2, r3, #9
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6899      	ldr	r1, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	029a      	lsls	r2, r3, #10
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	609a      	str	r2, [r3, #8]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40012300 	.word	0x40012300
 8001570:	0f000001 	.word	0x0f000001

08001574 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	; (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	; (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff29 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff3e 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff8e 	bl	800167c <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5d 	bl	8001628 <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff31 	bl	80015ec <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa2 	bl	80016e4 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e16b      	b.n	8001aa0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c8:	2201      	movs	r2, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	4013      	ands	r3, r2
 80017da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	f040 815a 	bne.w	8001a9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d005      	beq.n	80017fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d130      	bne.n	8001860 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	2203      	movs	r2, #3
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001834:	2201      	movs	r2, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 0201 	and.w	r2, r3, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b03      	cmp	r3, #3
 800186a:	d017      	beq.n	800189c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d123      	bne.n	80018f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	69b9      	ldr	r1, [r7, #24]
 80018ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0203 	and.w	r2, r3, #3
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4313      	orrs	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80b4 	beq.w	8001a9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b60      	ldr	r3, [pc, #384]	; (8001ab8 <HAL_GPIO_Init+0x30c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	4a5f      	ldr	r2, [pc, #380]	; (8001ab8 <HAL_GPIO_Init+0x30c>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001940:	6453      	str	r3, [r2, #68]	; 0x44
 8001942:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_GPIO_Init+0x30c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194e:	4a5b      	ldr	r2, [pc, #364]	; (8001abc <HAL_GPIO_Init+0x310>)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	089b      	lsrs	r3, r3, #2
 8001954:	3302      	adds	r3, #2
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	220f      	movs	r2, #15
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a52      	ldr	r2, [pc, #328]	; (8001ac0 <HAL_GPIO_Init+0x314>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d02b      	beq.n	80019d2 <HAL_GPIO_Init+0x226>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a51      	ldr	r2, [pc, #324]	; (8001ac4 <HAL_GPIO_Init+0x318>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d025      	beq.n	80019ce <HAL_GPIO_Init+0x222>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <HAL_GPIO_Init+0x31c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d01f      	beq.n	80019ca <HAL_GPIO_Init+0x21e>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4f      	ldr	r2, [pc, #316]	; (8001acc <HAL_GPIO_Init+0x320>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d019      	beq.n	80019c6 <HAL_GPIO_Init+0x21a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <HAL_GPIO_Init+0x324>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x216>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a4d      	ldr	r2, [pc, #308]	; (8001ad4 <HAL_GPIO_Init+0x328>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x212>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a4c      	ldr	r2, [pc, #304]	; (8001ad8 <HAL_GPIO_Init+0x32c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x20e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a4b      	ldr	r2, [pc, #300]	; (8001adc <HAL_GPIO_Init+0x330>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x20a>
 80019b2:	2307      	movs	r3, #7
 80019b4:	e00e      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019b6:	2308      	movs	r3, #8
 80019b8:	e00c      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019ba:	2306      	movs	r3, #6
 80019bc:	e00a      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019be:	2305      	movs	r3, #5
 80019c0:	e008      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019c2:	2304      	movs	r3, #4
 80019c4:	e006      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e004      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e002      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_GPIO_Init+0x228>
 80019d2:	2300      	movs	r3, #0
 80019d4:	69fa      	ldr	r2, [r7, #28]
 80019d6:	f002 0203 	and.w	r2, r2, #3
 80019da:	0092      	lsls	r2, r2, #2
 80019dc:	4093      	lsls	r3, r2
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e4:	4935      	ldr	r1, [pc, #212]	; (8001abc <HAL_GPIO_Init+0x310>)
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	089b      	lsrs	r3, r3, #2
 80019ea:	3302      	adds	r3, #2
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f2:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a16:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a1c:	4b30      	ldr	r3, [pc, #192]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a40:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a46:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a94:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <HAL_GPIO_Init+0x334>)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b0f      	cmp	r3, #15
 8001aa4:	f67f ae90 	bls.w	80017c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	bf00      	nop
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	40020000 	.word	0x40020000
 8001ac4:	40020400 	.word	0x40020400
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020c00 	.word	0x40020c00
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40021400 	.word	0x40021400
 8001ad8:	40021800 	.word	0x40021800
 8001adc:	40021c00 	.word	0x40021c00
 8001ae0:	40013c00 	.word	0x40013c00

08001ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e264      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d075      	beq.n	8001bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b02:	4ba3      	ldr	r3, [pc, #652]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d00c      	beq.n	8001b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b0e:	4ba0      	ldr	r3, [pc, #640]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d112      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4b9d      	ldr	r3, [pc, #628]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b26:	d10b      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	4b99      	ldr	r3, [pc, #612]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d05b      	beq.n	8001bec <HAL_RCC_OscConfig+0x108>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d157      	bne.n	8001bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e23f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d106      	bne.n	8001b58 <HAL_RCC_OscConfig+0x74>
 8001b4a:	4b91      	ldr	r3, [pc, #580]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a90      	ldr	r2, [pc, #576]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x98>
 8001b62:	4b8b      	ldr	r3, [pc, #556]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a8a      	ldr	r2, [pc, #552]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b88      	ldr	r3, [pc, #544]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a87      	ldr	r2, [pc, #540]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xb0>
 8001b7c:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a83      	ldr	r2, [pc, #524]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b81      	ldr	r3, [pc, #516]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a80      	ldr	r2, [pc, #512]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f83c 	bl	8000c18 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f838 	bl	8000c18 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e204      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xc0>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f828 	bl	8000c18 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f824 	bl	8000c18 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1f0      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0xe8>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bfa:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c06:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e1c4      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4952      	ldr	r1, [pc, #328]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <HAL_RCC_OscConfig+0x2b0>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7fe ffdd 	bl	8000c18 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7fe ffd9 	bl	8000c18 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e1a5      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b43      	ldr	r3, [pc, #268]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4940      	ldr	r1, [pc, #256]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <HAL_RCC_OscConfig+0x2b0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ffbc 	bl	8000c18 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7fe ffb8 	bl	8000c18 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e184      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d030      	beq.n	8001d30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b30      	ldr	r3, [pc, #192]	; (8001d98 <HAL_RCC_OscConfig+0x2b4>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7fe ff9c 	bl	8000c18 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7fe ff98 	bl	8000c18 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e164      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x200>
 8001d02:	e015      	b.n	8001d30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d04:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_RCC_OscConfig+0x2b4>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0a:	f7fe ff85 	bl	8000c18 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d12:	f7fe ff81 	bl	8000c18 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e14d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f0      	bne.n	8001d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80a0 	beq.w	8001e7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10f      	bne.n	8001d6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d121      	bne.n	8001dbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_RCC_OscConfig+0x2b8>)
 8001d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff47 	bl	8000c18 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	e011      	b.n	8001db2 <HAL_RCC_OscConfig+0x2ce>
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	42470000 	.word	0x42470000
 8001d98:	42470e80 	.word	0x42470e80
 8001d9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da0:	f7fe ff3a 	bl	8000c18 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e106      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b85      	ldr	r3, [pc, #532]	; (8001fc8 <HAL_RCC_OscConfig+0x4e4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2f0>
 8001dc6:	4b81      	ldr	r3, [pc, #516]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a80      	ldr	r2, [pc, #512]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	e01c      	b.n	8001e0e <HAL_RCC_OscConfig+0x32a>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b05      	cmp	r3, #5
 8001dda:	d10c      	bne.n	8001df6 <HAL_RCC_OscConfig+0x312>
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de0:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001de2:	f043 0304 	orr.w	r3, r3, #4
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
 8001de8:	4b78      	ldr	r3, [pc, #480]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a77      	ldr	r2, [pc, #476]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
 8001df4:	e00b      	b.n	8001e0e <HAL_RCC_OscConfig+0x32a>
 8001df6:	4b75      	ldr	r3, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	4a74      	ldr	r2, [pc, #464]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6713      	str	r3, [r2, #112]	; 0x70
 8001e02:	4b72      	ldr	r3, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a71      	ldr	r2, [pc, #452]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e08:	f023 0304 	bic.w	r3, r3, #4
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d015      	beq.n	8001e42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7fe feff 	bl	8000c18 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe fefb 	bl	8000c18 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0c5      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e34:	4b65      	ldr	r3, [pc, #404]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0ee      	beq.n	8001e1e <HAL_RCC_OscConfig+0x33a>
 8001e40:	e014      	b.n	8001e6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e42:	f7fe fee9 	bl	8000c18 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e4a:	f7fe fee5 	bl	8000c18 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e0af      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e60:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1ee      	bne.n	8001e4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d105      	bne.n	8001e7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	4a55      	ldr	r2, [pc, #340]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 809b 	beq.w	8001fbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e88:	4b50      	ldr	r3, [pc, #320]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d05c      	beq.n	8001f4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d141      	bne.n	8001f20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <HAL_RCC_OscConfig+0x4ec>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe feb9 	bl	8000c18 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eaa:	f7fe feb5 	bl	8000c18 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e081      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebc:	4b43      	ldr	r3, [pc, #268]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1f0      	bne.n	8001eaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	019b      	lsls	r3, r3, #6
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eea:	061b      	lsls	r3, r3, #24
 8001eec:	4937      	ldr	r1, [pc, #220]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <HAL_RCC_OscConfig+0x4ec>)
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fe8e 	bl	8000c18 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fe8a 	bl	8000c18 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e056      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x41c>
 8001f1e:	e04e      	b.n	8001fbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_RCC_OscConfig+0x4ec>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7fe fe77 	bl	8000c18 <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f2e:	f7fe fe73 	bl	8000c18 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e03f      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f0      	bne.n	8001f2e <HAL_RCC_OscConfig+0x44a>
 8001f4c:	e037      	b.n	8001fbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e032      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <HAL_RCC_OscConfig+0x4e8>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d028      	beq.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d11a      	bne.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d111      	bne.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	42470060 	.word	0x42470060

08001fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0cc      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b68      	ldr	r3, [pc, #416]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d90c      	bls.n	8002010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b65      	ldr	r3, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d044      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d119      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208e:	2b03      	cmp	r3, #3
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b3f      	ldr	r3, [pc, #252]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	4b3b      	ldr	r3, [pc, #236]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e067      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b2:	4b37      	ldr	r3, [pc, #220]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f023 0203 	bic.w	r2, r3, #3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4934      	ldr	r1, [pc, #208]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c4:	f7fe fda8 	bl	8000c18 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7fe fda4 	bl	8000c18 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e04f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 020c 	and.w	r2, r3, #12
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d1eb      	bne.n	80020cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d20c      	bcs.n	800211c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b22      	ldr	r3, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c4>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fd08 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00
 8002190:	40023800 	.word	0x40023800
 8002194:	080023d4 	.word	0x080023d4
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	2300      	movs	r3, #0
 80021b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b8:	4b67      	ldr	r3, [pc, #412]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d00d      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	f200 80bd 	bhi.w	8002344 <HAL_RCC_GetSysClockFreq+0x1a4>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x3a>
 80021d2:	e0b7      	b.n	8002344 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021d6:	60bb      	str	r3, [r7, #8]
       break;
 80021d8:	e0b7      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021dc:	60bb      	str	r3, [r7, #8]
      break;
 80021de:	e0b4      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b5d      	ldr	r3, [pc, #372]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ea:	4b5b      	ldr	r3, [pc, #364]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d04d      	beq.n	8002292 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b58      	ldr	r3, [pc, #352]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	461a      	mov	r2, r3
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	ea02 0800 	and.w	r8, r2, r0
 800220e:	ea03 0901 	and.w	r9, r3, r1
 8002212:	4640      	mov	r0, r8
 8002214:	4649      	mov	r1, r9
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	014b      	lsls	r3, r1, #5
 8002220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002224:	0142      	lsls	r2, r0, #5
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	ebb0 0008 	subs.w	r0, r0, r8
 800222e:	eb61 0109 	sbc.w	r1, r1, r9
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	018b      	lsls	r3, r1, #6
 800223c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002240:	0182      	lsls	r2, r0, #6
 8002242:	1a12      	subs	r2, r2, r0
 8002244:	eb63 0301 	sbc.w	r3, r3, r1
 8002248:	f04f 0000 	mov.w	r0, #0
 800224c:	f04f 0100 	mov.w	r1, #0
 8002250:	00d9      	lsls	r1, r3, #3
 8002252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002256:	00d0      	lsls	r0, r2, #3
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	eb12 0208 	adds.w	r2, r2, r8
 8002260:	eb43 0309 	adc.w	r3, r3, r9
 8002264:	f04f 0000 	mov.w	r0, #0
 8002268:	f04f 0100 	mov.w	r1, #0
 800226c:	0259      	lsls	r1, r3, #9
 800226e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002272:	0250      	lsls	r0, r2, #9
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	461a      	mov	r2, r3
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	f7fd ffa0 	bl	80001c8 <__aeabi_uldivmod>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4613      	mov	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	e04a      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	461a      	mov	r2, r3
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022a2:	f04f 0100 	mov.w	r1, #0
 80022a6:	ea02 0400 	and.w	r4, r2, r0
 80022aa:	ea03 0501 	and.w	r5, r3, r1
 80022ae:	4620      	mov	r0, r4
 80022b0:	4629      	mov	r1, r5
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	014b      	lsls	r3, r1, #5
 80022bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022c0:	0142      	lsls	r2, r0, #5
 80022c2:	4610      	mov	r0, r2
 80022c4:	4619      	mov	r1, r3
 80022c6:	1b00      	subs	r0, r0, r4
 80022c8:	eb61 0105 	sbc.w	r1, r1, r5
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	018b      	lsls	r3, r1, #6
 80022d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022da:	0182      	lsls	r2, r0, #6
 80022dc:	1a12      	subs	r2, r2, r0
 80022de:	eb63 0301 	sbc.w	r3, r3, r1
 80022e2:	f04f 0000 	mov.w	r0, #0
 80022e6:	f04f 0100 	mov.w	r1, #0
 80022ea:	00d9      	lsls	r1, r3, #3
 80022ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022f0:	00d0      	lsls	r0, r2, #3
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	1912      	adds	r2, r2, r4
 80022f8:	eb45 0303 	adc.w	r3, r5, r3
 80022fc:	f04f 0000 	mov.w	r0, #0
 8002300:	f04f 0100 	mov.w	r1, #0
 8002304:	0299      	lsls	r1, r3, #10
 8002306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800230a:	0290      	lsls	r0, r2, #10
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	461a      	mov	r2, r3
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	f7fd ff54 	bl	80001c8 <__aeabi_uldivmod>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4613      	mov	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	3301      	adds	r3, #1
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	60bb      	str	r3, [r7, #8]
      break;
 8002342:	e002      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002346:	60bb      	str	r3, [r7, #8]
      break;
 8002348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800234a:	68bb      	ldr	r3, [r7, #8]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3710      	adds	r7, #16
 8002350:	46bd      	mov	sp, r7
 8002352:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	00f42400 	.word	0x00f42400
 8002360:	007a1200 	.word	0x007a1200

08002364 <__libc_init_array>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	4d0d      	ldr	r5, [pc, #52]	; (800239c <__libc_init_array+0x38>)
 8002368:	4c0d      	ldr	r4, [pc, #52]	; (80023a0 <__libc_init_array+0x3c>)
 800236a:	1b64      	subs	r4, r4, r5
 800236c:	10a4      	asrs	r4, r4, #2
 800236e:	2600      	movs	r6, #0
 8002370:	42a6      	cmp	r6, r4
 8002372:	d109      	bne.n	8002388 <__libc_init_array+0x24>
 8002374:	4d0b      	ldr	r5, [pc, #44]	; (80023a4 <__libc_init_array+0x40>)
 8002376:	4c0c      	ldr	r4, [pc, #48]	; (80023a8 <__libc_init_array+0x44>)
 8002378:	f000 f820 	bl	80023bc <_init>
 800237c:	1b64      	subs	r4, r4, r5
 800237e:	10a4      	asrs	r4, r4, #2
 8002380:	2600      	movs	r6, #0
 8002382:	42a6      	cmp	r6, r4
 8002384:	d105      	bne.n	8002392 <__libc_init_array+0x2e>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	f855 3b04 	ldr.w	r3, [r5], #4
 800238c:	4798      	blx	r3
 800238e:	3601      	adds	r6, #1
 8002390:	e7ee      	b.n	8002370 <__libc_init_array+0xc>
 8002392:	f855 3b04 	ldr.w	r3, [r5], #4
 8002396:	4798      	blx	r3
 8002398:	3601      	adds	r6, #1
 800239a:	e7f2      	b.n	8002382 <__libc_init_array+0x1e>
 800239c:	080023ec 	.word	0x080023ec
 80023a0:	080023ec 	.word	0x080023ec
 80023a4:	080023ec 	.word	0x080023ec
 80023a8:	080023f0 	.word	0x080023f0

080023ac <memset>:
 80023ac:	4402      	add	r2, r0
 80023ae:	4603      	mov	r3, r0
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d100      	bne.n	80023b6 <memset+0xa>
 80023b4:	4770      	bx	lr
 80023b6:	f803 1b01 	strb.w	r1, [r3], #1
 80023ba:	e7f9      	b.n	80023b0 <memset+0x4>

080023bc <_init>:
 80023bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023be:	bf00      	nop
 80023c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023c2:	bc08      	pop	{r3}
 80023c4:	469e      	mov	lr, r3
 80023c6:	4770      	bx	lr

080023c8 <_fini>:
 80023c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ca:	bf00      	nop
 80023cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ce:	bc08      	pop	{r3}
 80023d0:	469e      	mov	lr, r3
 80023d2:	4770      	bx	lr
