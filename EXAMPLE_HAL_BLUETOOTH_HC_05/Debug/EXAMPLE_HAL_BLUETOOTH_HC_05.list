
EXAMPLE_HAL_BLUETOOTH_HC_05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003438  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080035c0  080035c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003608  08003608  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003608  08003608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003610  08003610  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa45  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d82  00000000  00000000  0002fa81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  00031808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b78  00000000  00000000  00032428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020cce  00000000  00000000  00032fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e254  00000000  00000000  00053c6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9fd3  00000000  00000000  00061ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012be95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032e8  00000000  00000000  0012bee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080035a8 	.word	0x080035a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080035a8 	.word	0x080035a8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb42 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f90a 	bl	80006f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004e0:	f000 f892 	bl	8000608 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f8dc 	bl	80006a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 80004e8:	20c8      	movs	r0, #200	; 0xc8
 80004ea:	f000 fba9 	bl	8000c40 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <main+0x54>)
 80004f6:	f000 ff07 	bl	8001308 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
  HAL_Delay(1000);
 80004fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004fe:	f000 fb9f 	bl	8000c40 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 8000502:	2232      	movs	r2, #50	; 0x32
 8000504:	2100      	movs	r1, #0
 8000506:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x58>)
 8000508:	f003 f846 	bl	8003598 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 800050c:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x5c>)
 800050e:	f001 fbd9 	bl	8001cc4 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <main+0x60>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	68da      	ldr	r2, [r3, #12]
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <main+0x60>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f042 0220 	orr.w	r2, r2, #32
 8000520:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x52>
 8000524:	40020c00 	.word	0x40020c00
 8000528:	200000b8 	.word	0x200000b8
 800052c:	2000002c 	.word	0x2000002c
 8000530:	20000074 	.word	0x20000074

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f828 	bl	8003598 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	; (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	; (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a8:	23a8      	movs	r3, #168	; 0xa8
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 febf 	bl	800133c <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f8ee 	bl	80007a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f920 	bl	800182c <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f2:	f000 f8d7 	bl	80007a4 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_TIM2_Init+0x94>)
 8000626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800062a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84;
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_TIM2_Init+0x94>)
 800062e:	2254      	movs	r2, #84	; 0x54
 8000630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_TIM2_Init+0x94>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <MX_TIM2_Init+0x94>)
 800063a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800063e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b16      	ldr	r3, [pc, #88]	; (800069c <MX_TIM2_Init+0x94>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000646:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_TIM2_Init+0x94>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800064c:	4813      	ldr	r0, [pc, #76]	; (800069c <MX_TIM2_Init+0x94>)
 800064e:	f001 fae9 	bl	8001c24 <HAL_TIM_Base_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000658:	f000 f8a4 	bl	80007a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4619      	mov	r1, r3
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_TIM2_Init+0x94>)
 800066a:	f001 fca3 	bl	8001fb4 <HAL_TIM_ConfigClockSource>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000674:	f000 f896 	bl	80007a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000678:	2300      	movs	r3, #0
 800067a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_TIM2_Init+0x94>)
 8000686:	f001 fec9 	bl	800241c <HAL_TIMEx_MasterConfigSynchronization>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000690:	f000 f888 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3718      	adds	r7, #24
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000002c 	.word	0x2000002c

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f001 ff30 	bl	800253c <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f85f 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000074 	.word	0x20000074
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_GPIO_Init+0xa8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <MX_GPIO_Init+0xa8>)
 8000714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_GPIO_Init+0xa8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_GPIO_Init+0xa8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a1b      	ldr	r2, [pc, #108]	; (800079c <MX_GPIO_Init+0xa8>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_GPIO_Init+0xa8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_GPIO_Init+0xa8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a14      	ldr	r2, [pc, #80]	; (800079c <MX_GPIO_Init+0xa8>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_GPIO_Init+0xa8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000764:	480e      	ldr	r0, [pc, #56]	; (80007a0 <MX_GPIO_Init+0xac>)
 8000766:	f000 fdcf 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800076a:	2201      	movs	r2, #1
 800076c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000770:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0xac>)
 8000772:	f000 fdc9 	bl	8001308 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RESET_Pin LED_Pin */
  GPIO_InitStruct.Pin = RESET_Pin|LED_Pin;
 8000776:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2302      	movs	r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0xac>)
 8000790:	f000 fc1e 	bl	8000fd0 <HAL_GPIO_Init>

}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020c00 	.word	0x40020c00

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>

080007ae <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b087      	sub	sp, #28
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	4613      	mov	r3, r2
 80007ba:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 80007bc:	2300      	movs	r3, #0
 80007be:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	75bb      	strb	r3, [r7, #22]
 80007c4:	e012      	b.n	80007ec <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 80007c6:	7dbb      	ldrb	r3, [r7, #22]
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	4413      	add	r3, r2
 80007cc:	781a      	ldrb	r2, [r3, #0]
 80007ce:	7dbb      	ldrb	r3, [r7, #22]
 80007d0:	68b9      	ldr	r1, [r7, #8]
 80007d2:	440b      	add	r3, r1
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d103      	bne.n	80007e2 <string_compare+0x34>
	   	  		  comVAR++;
 80007da:	7dfb      	ldrb	r3, [r7, #23]
 80007dc:	3301      	adds	r3, #1
 80007de:	75fb      	strb	r3, [r7, #23]
 80007e0:	e001      	b.n	80007e6 <string_compare+0x38>
	   	  	  else comVAR=0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80007e6:	7dbb      	ldrb	r3, [r7, #22]
 80007e8:	3301      	adds	r3, #1
 80007ea:	75bb      	strb	r3, [r7, #22]
 80007ec:	7dbb      	ldrb	r3, [r7, #22]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	88fa      	ldrh	r2, [r7, #6]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d8e7      	bhi.n	80007c6 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	88fa      	ldrh	r2, [r7, #6]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d101      	bne.n	8000804 <string_compare+0x56>
		 	return 1;
 8000800:	2301      	movs	r3, #1
 8000802:	e000      	b.n	8000806 <string_compare+0x58>
	 else 	return 0;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	371c      	adds	r7, #28
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <Message_handler>:

void Message_handler()
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000818:	2206      	movs	r2, #6
 800081a:	4927      	ldr	r1, [pc, #156]	; (80008b8 <Message_handler+0xa4>)
 800081c:	4827      	ldr	r0, [pc, #156]	; (80008bc <Message_handler+0xa8>)
 800081e:	f7ff ffc6 	bl	80007ae <string_compare>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00d      	beq.n	8000844 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082e:	4824      	ldr	r0, [pc, #144]	; (80008c0 <Message_handler+0xac>)
 8000830:	f000 fd6a 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000834:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000838:	220b      	movs	r2, #11
 800083a:	4922      	ldr	r1, [pc, #136]	; (80008c4 <Message_handler+0xb0>)
 800083c:	4822      	ldr	r0, [pc, #136]	; (80008c8 <Message_handler+0xb4>)
 800083e:	f001 feca 	bl	80025d6 <HAL_UART_Transmit>
 8000842:	e02c      	b.n	800089e <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000844:	2207      	movs	r2, #7
 8000846:	4921      	ldr	r1, [pc, #132]	; (80008cc <Message_handler+0xb8>)
 8000848:	481c      	ldr	r0, [pc, #112]	; (80008bc <Message_handler+0xa8>)
 800084a:	f7ff ffb0 	bl	80007ae <string_compare>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00d      	beq.n	8000870 <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085a:	4819      	ldr	r0, [pc, #100]	; (80008c0 <Message_handler+0xac>)
 800085c:	f000 fd54 	bl	8001308 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 8000860:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000864:	220c      	movs	r2, #12
 8000866:	491a      	ldr	r1, [pc, #104]	; (80008d0 <Message_handler+0xbc>)
 8000868:	4817      	ldr	r0, [pc, #92]	; (80008c8 <Message_handler+0xb4>)
 800086a:	f001 feb4 	bl	80025d6 <HAL_UART_Transmit>
 800086e:	e016      	b.n	800089e <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 8000870:	4812      	ldr	r0, [pc, #72]	; (80008bc <Message_handler+0xa8>)
 8000872:	f7ff fca9 	bl	80001c8 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <Message_handler+0xa8>)
 800087c:	4413      	add	r3, r2
 800087e:	4915      	ldr	r1, [pc, #84]	; (80008d4 <Message_handler+0xc0>)
 8000880:	461a      	mov	r2, r3
 8000882:	460b      	mov	r3, r1
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <Message_handler+0xa8>)
 800088a:	f7ff fc9d 	bl	80001c8 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	b29a      	uxth	r2, r3
 8000892:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000896:	4909      	ldr	r1, [pc, #36]	; (80008bc <Message_handler+0xa8>)
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <Message_handler+0xb4>)
 800089a:	f001 fe9c 	bl	80025d6 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 800089e:	2232      	movs	r2, #50	; 0x32
 80008a0:	2100      	movs	r1, #0
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <Message_handler+0xa8>)
 80008a4:	f002 fe78 	bl	8003598 <memset>
	buffer_index = 0;
 80008a8:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <Message_handler+0xc4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <Message_handler+0xc8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	080035c0 	.word	0x080035c0
 80008bc:	200000b8 	.word	0x200000b8
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	080035c8 	.word	0x080035c8
 80008c8:	20000074 	.word	0x20000074
 80008cc:	080035d4 	.word	0x080035d4
 80008d0:	080035dc 	.word	0x080035dc
 80008d4:	080035ec 	.word	0x080035ec
 80008d8:	20000029 	.word	0x20000029
 80008dc:	20000028 	.word	0x20000028

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <HAL_MspInit+0x4c>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a0f      	ldr	r2, [pc, #60]	; (800092c <HAL_MspInit+0x4c>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <HAL_MspInit+0x4c>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a08      	ldr	r2, [pc, #32]	; (800092c <HAL_MspInit+0x4c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000940:	d115      	bne.n	800096e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_TIM_Base_MspInit+0x48>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <HAL_TIM_Base_MspInit+0x48>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6413      	str	r3, [r2, #64]	; 0x40
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_TIM_Base_MspInit+0x48>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	201c      	movs	r0, #28
 8000964:	f000 fa6b 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000968:	201c      	movs	r0, #28
 800096a:	f000 fa84 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <HAL_UART_MspInit+0x94>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d133      	bne.n	8000a06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_UART_MspInit+0x98>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <HAL_UART_MspInit+0x98>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_UART_MspInit+0x98>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_UART_MspInit+0x98>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <HAL_UART_MspInit+0x98>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_UART_MspInit+0x98>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_UART_MspInit+0x9c>)
 80009f2:	f000 faed 	bl	8000fd0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2026      	movs	r0, #38	; 0x26
 80009fc:	f000 fa1f 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a00:	2026      	movs	r0, #38	; 0x26
 8000a02:	f000 fa38 	bl	8000e76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40004400 	.word	0x40004400
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020000 	.word	0x40020000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <NMI_Handler+0x4>

08000a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <HardFault_Handler+0x4>

08000a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <MemManage_Handler+0x4>

08000a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <BusFault_Handler+0x4>

08000a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <UsageFault_Handler+0x4>

08000a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a68:	f000 f8ca 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer) > 0)
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <TIM2_IRQHandler+0x30>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d005      	beq.n	8000a88 <TIM2_IRQHandler+0x18>
		timer_count++;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <TIM2_IRQHandler+0x34>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	3301      	adds	r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b07      	ldr	r3, [pc, #28]	; (8000aa4 <TIM2_IRQHandler+0x34>)
 8000a86:	701a      	strb	r2, [r3, #0]

	if(timer_count > 5)
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <TIM2_IRQHandler+0x34>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b05      	cmp	r3, #5
 8000a8e:	d901      	bls.n	8000a94 <TIM2_IRQHandler+0x24>
		Message_handler();
 8000a90:	f7ff fec0 	bl	8000814 <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <TIM2_IRQHandler+0x38>)
 8000a96:	f001 f985 	bl	8001da4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000b8 	.word	0x200000b8
 8000aa4:	20000028 	.word	0x20000028
 8000aa8:	2000002c 	.word	0x2000002c

08000aac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)buffer, 1, 10);
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	4908      	ldr	r1, [pc, #32]	; (8000ad8 <USART2_IRQHandler+0x2c>)
 8000ab6:	4809      	ldr	r0, [pc, #36]	; (8000adc <USART2_IRQHandler+0x30>)
 8000ab8:	f001 fe1f 	bl	80026fa <HAL_UART_Receive>

	if(buffer[buffer_index-1]  == '\n')
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <USART2_IRQHandler+0x34>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <USART2_IRQHandler+0x2c>)
 8000ac4:	5cd3      	ldrb	r3, [r2, r3]
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	d101      	bne.n	8000ace <USART2_IRQHandler+0x22>
		Message_handler();
 8000aca:	f7ff fea3 	bl	8000814 <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <USART2_IRQHandler+0x30>)
 8000ad0:	f001 feb6 	bl	8002840 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000b8 	.word	0x200000b8
 8000adc:	20000074 	.word	0x20000074
 8000ae0:	20000029 	.word	0x20000029

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0e:	490e      	ldr	r1, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b24:	4c0b      	ldr	r4, [pc, #44]	; (8000b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b32:	f7ff ffd7 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b36:	f002 fd0b 	bl	8003550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b3a:	f7ff fcc9 	bl	80004d0 <main>
  bx  lr    
 8000b3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b4c:	08003618 	.word	0x08003618
  ldr r2, =_sbss
 8000b50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b54:	200000f0 	.word	0x200000f0

08000b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b60:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <HAL_Init+0x40>)
 8000b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_Init+0x40>)
 8000b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_Init+0x40>)
 8000b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b84:	2003      	movs	r0, #3
 8000b86:	f000 f94f 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8a:	200f      	movs	r0, #15
 8000b8c:	f000 f808 	bl	8000ba0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b90:	f7ff fea6 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023c00 	.word	0x40023c00

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x54>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_InitTick+0x58>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f967 	bl	8000e92 <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f92f 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x5c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000000 	.word	0x20000000
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000004 	.word	0x20000004

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000008 	.word	0x20000008
 8000c24:	200000ec 	.word	0x200000ec

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200000ec 	.word	0x200000ec

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffde 	bl	8000c28 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000eb8:	f7ff feb6 	bl	8000c28 <HAL_GetTick>
 8000ebc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d008      	beq.n	8000edc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2280      	movs	r2, #128	; 0x80
 8000ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e052      	b.n	8000f82 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0216 	bic.w	r2, r2, #22
 8000eea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695a      	ldr	r2, [r3, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000efa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d103      	bne.n	8000f0c <HAL_DMA_Abort+0x62>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d007      	beq.n	8000f1c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0208 	bic.w	r2, r2, #8
 8000f1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f022 0201 	bic.w	r2, r2, #1
 8000f2a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2c:	e013      	b.n	8000f56 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f2e:	f7ff fe7b 	bl	8000c28 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b05      	cmp	r3, #5
 8000f3a:	d90c      	bls.n	8000f56 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2220      	movs	r2, #32
 8000f40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2203      	movs	r2, #3
 8000f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e015      	b.n	8000f82 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e4      	bne.n	8000f2e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f68:	223f      	movs	r2, #63	; 0x3f
 8000f6a:	409a      	lsls	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b083      	sub	sp, #12
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d004      	beq.n	8000fa8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e00c      	b.n	8000fc2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2205      	movs	r2, #5
 8000fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f022 0201 	bic.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	e16b      	b.n	80012c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	429a      	cmp	r2, r3
 8001006:	f040 815a 	bne.w	80012be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b01      	cmp	r3, #1
 8001014:	d005      	beq.n	8001022 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	2b02      	cmp	r3, #2
 8001020:	d130      	bne.n	8001084 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	2203      	movs	r2, #3
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	091b      	lsrs	r3, r3, #4
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	69b9      	ldr	r1, [r7, #24]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80b4 	beq.w	80012be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b60      	ldr	r3, [pc, #384]	; (80012dc <HAL_GPIO_Init+0x30c>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115e:	4a5f      	ldr	r2, [pc, #380]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001164:	6453      	str	r3, [r2, #68]	; 0x44
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_GPIO_Init+0x30c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001172:	4a5b      	ldr	r2, [pc, #364]	; (80012e0 <HAL_GPIO_Init+0x310>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	089b      	lsrs	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f003 0303 	and.w	r3, r3, #3
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x314>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x226>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x318>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x222>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_GPIO_Init+0x31c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x21e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x320>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21a>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x324>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x216>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_GPIO_Init+0x328>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x212>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x32c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x20e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	; (8001300 <HAL_GPIO_Init+0x330>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20a>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e00e      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011da:	2308      	movs	r3, #8
 80011dc:	e00c      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00a      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e2:	2305      	movs	r3, #5
 80011e4:	e008      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <HAL_GPIO_Init+0x228>
 80011f6:	2300      	movs	r3, #0
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	f002 0203 	and.w	r2, r2, #3
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	4093      	lsls	r3, r2
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001208:	4935      	ldr	r1, [pc, #212]	; (80012e0 <HAL_GPIO_Init+0x310>)
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001216:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123a:	4a32      	ldr	r2, [pc, #200]	; (8001304 <HAL_GPIO_Init+0x334>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001240:	4b30      	ldr	r3, [pc, #192]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001264:	4a27      	ldr	r2, [pc, #156]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <HAL_GPIO_Init+0x334>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128e:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <HAL_GPIO_Init+0x334>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b8:	4a12      	ldr	r2, [pc, #72]	; (8001304 <HAL_GPIO_Init+0x334>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3301      	adds	r3, #1
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	f67f ae90 	bls.w	8000fec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012cc:	bf00      	nop
 80012ce:	bf00      	nop
 80012d0:	3724      	adds	r7, #36	; 0x24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021400 	.word	0x40021400
 80012fc:	40021800 	.word	0x40021800
 8001300:	40021c00 	.word	0x40021c00
 8001304:	40013c00 	.word	0x40013c00

08001308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
 8001314:	4613      	mov	r3, r2
 8001316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001318:	787b      	ldrb	r3, [r7, #1]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800131e:	887a      	ldrh	r2, [r7, #2]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001324:	e003      	b.n	800132e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	041a      	lsls	r2, r3, #16
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	619a      	str	r2, [r3, #24]
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e264      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d075      	beq.n	8001446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800135a:	4ba3      	ldr	r3, [pc, #652]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4ba0      	ldr	r3, [pc, #640]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d112      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4b9d      	ldr	r3, [pc, #628]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b99      	ldr	r3, [pc, #612]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d05b      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d157      	bne.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e23f      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x74>
 80013a2:	4b91      	ldr	r3, [pc, #580]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a90      	ldr	r2, [pc, #576]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a8a      	ldr	r2, [pc, #552]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a87      	ldr	r2, [pc, #540]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013d4:	4b84      	ldr	r3, [pc, #528]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a83      	ldr	r2, [pc, #524]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a80      	ldr	r2, [pc, #512]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc18 	bl	8000c28 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fc14 	bl	8000c28 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	; 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e204      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xc0>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fc04 	bl	8000c28 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fc00 	bl	8000c28 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	; 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1f0      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b6c      	ldr	r3, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001452:	4b65      	ldr	r3, [pc, #404]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b62      	ldr	r3, [pc, #392]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b5c      	ldr	r3, [pc, #368]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c4      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4952      	ldr	r1, [pc, #328]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <HAL_RCC_OscConfig+0x2b0>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fbb9 	bl	8000c28 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fbb5 	bl	8000c28 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a5      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b46      	ldr	r3, [pc, #280]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4940      	ldr	r1, [pc, #256]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <HAL_RCC_OscConfig+0x2b0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fb98 	bl	8000c28 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fb94 	bl	8000c28 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e184      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d030      	beq.n	8001588 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_RCC_OscConfig+0x2b4>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fb78 	bl	8000c28 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fb74 	bl	8000c28 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e164      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x200>
 800155a:	e015      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_OscConfig+0x2b4>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fb61 	bl	8000c28 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fb5d 	bl	8000c28 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e14d      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157c:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1f0      	bne.n	800156a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 80a0 	beq.w	80016d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10f      	bne.n	80015c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_OscConfig+0x2b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d121      	bne.n	8001616 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_RCC_OscConfig+0x2b8>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_RCC_OscConfig+0x2b8>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fb23 	bl	8000c28 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	e011      	b.n	800160a <HAL_RCC_OscConfig+0x2ce>
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470000 	.word	0x42470000
 80015f0:	42470e80 	.word	0x42470e80
 80015f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f8:	f7ff fb16 	bl	8000c28 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e106      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b85      	ldr	r3, [pc, #532]	; (8001820 <HAL_RCC_OscConfig+0x4e4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <HAL_RCC_OscConfig+0x2f0>
 800161e:	4b81      	ldr	r3, [pc, #516]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001622:	4a80      	ldr	r2, [pc, #512]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6713      	str	r3, [r2, #112]	; 0x70
 800162a:	e01c      	b.n	8001666 <HAL_RCC_OscConfig+0x32a>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b05      	cmp	r3, #5
 8001632:	d10c      	bne.n	800164e <HAL_RCC_OscConfig+0x312>
 8001634:	4b7b      	ldr	r3, [pc, #492]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a7a      	ldr	r2, [pc, #488]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800163a:	f043 0304 	orr.w	r3, r3, #4
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	4b78      	ldr	r3, [pc, #480]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001644:	4a77      	ldr	r2, [pc, #476]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6713      	str	r3, [r2, #112]	; 0x70
 800164c:	e00b      	b.n	8001666 <HAL_RCC_OscConfig+0x32a>
 800164e:	4b75      	ldr	r3, [pc, #468]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a74      	ldr	r2, [pc, #464]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001654:	f023 0301 	bic.w	r3, r3, #1
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	4b72      	ldr	r3, [pc, #456]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a71      	ldr	r2, [pc, #452]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d015      	beq.n	800169a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166e:	f7ff fadb 	bl	8000c28 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	e00a      	b.n	800168c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001676:	f7ff fad7 	bl	8000c28 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	f241 3288 	movw	r2, #5000	; 0x1388
 8001684:	4293      	cmp	r3, r2
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e0c5      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168c:	4b65      	ldr	r3, [pc, #404]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0ee      	beq.n	8001676 <HAL_RCC_OscConfig+0x33a>
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff fac5 	bl	8000c28 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff fac1 	bl	8000c28 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0af      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b8:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ee      	bne.n	80016a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016c4:	7dfb      	ldrb	r3, [r7, #23]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d105      	bne.n	80016d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ca:	4b56      	ldr	r3, [pc, #344]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a55      	ldr	r2, [pc, #340]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80016d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 809b 	beq.w	8001816 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d05c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d141      	bne.n	8001778 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fa:	f7ff fa95 	bl	8000c28 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001702:	f7ff fa91 	bl	8000c28 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e081      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001714:	4b43      	ldr	r3, [pc, #268]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1f0      	bne.n	8001702 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69da      	ldr	r2, [r3, #28]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	019b      	lsls	r3, r3, #6
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	3b01      	subs	r3, #1
 800173a:	041b      	lsls	r3, r3, #16
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	061b      	lsls	r3, r3, #24
 8001744:	4937      	ldr	r1, [pc, #220]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174a:	4b37      	ldr	r3, [pc, #220]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff fa6a 	bl	8000c28 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fa66 	bl	8000c28 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e056      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176a:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x41c>
 8001776:	e04e      	b.n	8001816 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0x4ec>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177e:	f7ff fa53 	bl	8000c28 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001786:	f7ff fa4f 	bl	8000c28 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e03f      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x44a>
 80017a4:	e037      	b.n	8001816 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e032      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_RCC_OscConfig+0x4e8>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d028      	beq.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d121      	bne.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d11a      	bne.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017e2:	4013      	ands	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d111      	bne.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	3b01      	subs	r3, #1
 80017fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40007000 	.word	0x40007000
 8001824:	40023800 	.word	0x40023800
 8001828:	42470060 	.word	0x42470060

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0cc      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b68      	ldr	r3, [pc, #416]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d90c      	bls.n	8001868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b65      	ldr	r3, [pc, #404]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a58      	ldr	r2, [pc, #352]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800188a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d044      	beq.n	800194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e067      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b37      	ldr	r3, [pc, #220]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4934      	ldr	r1, [pc, #208]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800191c:	f7ff f984 	bl	8000c28 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff f980 	bl	8000c28 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b25      	ldr	r3, [pc, #148]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d20c      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b22      	ldr	r3, [pc, #136]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	; (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	; (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f8e4 	bl	8000ba0 <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	080035f0 	.word	0x080035f0
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a10:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d00d      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	f200 80bd 	bhi.w	8001b9c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e0b7      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001a2e:	60bb      	str	r3, [r7, #8]
       break;
 8001a30:	e0b7      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a32:	4b61      	ldr	r3, [pc, #388]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001a34:	60bb      	str	r3, [r7, #8]
      break;
 8001a36:	e0b4      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a38:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a42:	4b5b      	ldr	r3, [pc, #364]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d04d      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b58      	ldr	r3, [pc, #352]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	461a      	mov	r2, r3
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	ea02 0800 	and.w	r8, r2, r0
 8001a66:	ea03 0901 	and.w	r9, r3, r1
 8001a6a:	4640      	mov	r0, r8
 8001a6c:	4649      	mov	r1, r9
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	014b      	lsls	r3, r1, #5
 8001a78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a7c:	0142      	lsls	r2, r0, #5
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	ebb0 0008 	subs.w	r0, r0, r8
 8001a86:	eb61 0109 	sbc.w	r1, r1, r9
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	018b      	lsls	r3, r1, #6
 8001a94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a98:	0182      	lsls	r2, r0, #6
 8001a9a:	1a12      	subs	r2, r2, r0
 8001a9c:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa0:	f04f 0000 	mov.w	r0, #0
 8001aa4:	f04f 0100 	mov.w	r1, #0
 8001aa8:	00d9      	lsls	r1, r3, #3
 8001aaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aae:	00d0      	lsls	r0, r2, #3
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	eb12 0208 	adds.w	r2, r2, r8
 8001ab8:	eb43 0309 	adc.w	r3, r3, r9
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	0259      	lsls	r1, r3, #9
 8001ac6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001aca:	0250      	lsls	r0, r2, #9
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	f7fe fb7c 	bl	80001d8 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e04a      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	461a      	mov	r2, r3
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001afa:	f04f 0100 	mov.w	r1, #0
 8001afe:	ea02 0400 	and.w	r4, r2, r0
 8001b02:	ea03 0501 	and.w	r5, r3, r1
 8001b06:	4620      	mov	r0, r4
 8001b08:	4629      	mov	r1, r5
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	014b      	lsls	r3, r1, #5
 8001b14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b18:	0142      	lsls	r2, r0, #5
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	1b00      	subs	r0, r0, r4
 8001b20:	eb61 0105 	sbc.w	r1, r1, r5
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	018b      	lsls	r3, r1, #6
 8001b2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b32:	0182      	lsls	r2, r0, #6
 8001b34:	1a12      	subs	r2, r2, r0
 8001b36:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3a:	f04f 0000 	mov.w	r0, #0
 8001b3e:	f04f 0100 	mov.w	r1, #0
 8001b42:	00d9      	lsls	r1, r3, #3
 8001b44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b48:	00d0      	lsls	r0, r2, #3
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	1912      	adds	r2, r2, r4
 8001b50:	eb45 0303 	adc.w	r3, r5, r3
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0299      	lsls	r1, r3, #10
 8001b5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b62:	0290      	lsls	r0, r2, #10
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	f7fe fb30 	bl	80001d8 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	60bb      	str	r3, [r7, #8]
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b9e:	60bb      	str	r3, [r7, #8]
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	68bb      	ldr	r3, [r7, #8]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08003600 	.word	0x08003600

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffdc 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0b5b      	lsrs	r3, r3, #13
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08003600 	.word	0x08003600

08001c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e041      	b.n	8001cba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7fe fe70 	bl	8000930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3304      	adds	r3, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f000 faa0 	bl	80021a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d001      	beq.n	8001cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e04e      	b.n	8001d7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d022      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d01d      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a1f      	ldr	r2, [pc, #124]	; (8001d8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d018      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1e      	ldr	r2, [pc, #120]	; (8001d90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d013      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1c      	ldr	r2, [pc, #112]	; (8001d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d009      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a19      	ldr	r2, [pc, #100]	; (8001d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d010      	beq.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	e007      	b.n	8001d78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40000800 	.word	0x40000800
 8001d94:	40000c00 	.word	0x40000c00
 8001d98:	40010400 	.word	0x40010400
 8001d9c:	40014000 	.word	0x40014000
 8001da0:	40001800 	.word	0x40001800

08001da4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d122      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d11b      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0202 	mvn.w	r2, #2
 8001dd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f9bf 	bl	800216a <HAL_TIM_IC_CaptureCallback>
 8001dec:	e005      	b.n	8001dfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f9b1 	bl	8002156 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f9c2 	bl	800217e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d122      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d11b      	bne.n	8001e54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0204 	mvn.w	r2, #4
 8001e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2202      	movs	r2, #2
 8001e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f995 	bl	800216a <HAL_TIM_IC_CaptureCallback>
 8001e40:	e005      	b.n	8001e4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f987 	bl	8002156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f998 	bl	800217e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d122      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d11b      	bne.n	8001ea8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0208 	mvn.w	r2, #8
 8001e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f96b 	bl	800216a <HAL_TIM_IC_CaptureCallback>
 8001e94:	e005      	b.n	8001ea2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f95d 	bl	8002156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 f96e 	bl	800217e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d122      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d11b      	bne.n	8001efc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0210 	mvn.w	r2, #16
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f941 	bl	800216a <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f933 	bl	8002156 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f944 	bl	800217e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0201 	mvn.w	r2, #1
 8001f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f90d 	bl	8002142 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f32:	2b80      	cmp	r3, #128	; 0x80
 8001f34:	d10e      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d107      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 faea 	bl	8002528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b40      	cmp	r3, #64	; 0x40
 8001f60:	d10e      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b40      	cmp	r3, #64	; 0x40
 8001f6e:	d107      	bne.n	8001f80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f909 	bl	8002192 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d10e      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0320 	and.w	r3, r3, #32
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d107      	bne.n	8001fac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0220 	mvn.w	r2, #32
 8001fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 fab4 	bl	8002514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_TIM_ConfigClockSource+0x1c>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e0b4      	b.n	800213a <HAL_TIM_ConfigClockSource+0x186>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ff6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002008:	d03e      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0xd4>
 800200a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200e:	f200 8087 	bhi.w	8002120 <HAL_TIM_ConfigClockSource+0x16c>
 8002012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002016:	f000 8086 	beq.w	8002126 <HAL_TIM_ConfigClockSource+0x172>
 800201a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201e:	d87f      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x16c>
 8002020:	2b70      	cmp	r3, #112	; 0x70
 8002022:	d01a      	beq.n	800205a <HAL_TIM_ConfigClockSource+0xa6>
 8002024:	2b70      	cmp	r3, #112	; 0x70
 8002026:	d87b      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x16c>
 8002028:	2b60      	cmp	r3, #96	; 0x60
 800202a:	d050      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x11a>
 800202c:	2b60      	cmp	r3, #96	; 0x60
 800202e:	d877      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x16c>
 8002030:	2b50      	cmp	r3, #80	; 0x50
 8002032:	d03c      	beq.n	80020ae <HAL_TIM_ConfigClockSource+0xfa>
 8002034:	2b50      	cmp	r3, #80	; 0x50
 8002036:	d873      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x16c>
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d058      	beq.n	80020ee <HAL_TIM_ConfigClockSource+0x13a>
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d86f      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x16c>
 8002040:	2b30      	cmp	r3, #48	; 0x30
 8002042:	d064      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x15a>
 8002044:	2b30      	cmp	r3, #48	; 0x30
 8002046:	d86b      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x16c>
 8002048:	2b20      	cmp	r3, #32
 800204a:	d060      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x15a>
 800204c:	2b20      	cmp	r3, #32
 800204e:	d867      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x16c>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d05c      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x15a>
 8002054:	2b10      	cmp	r3, #16
 8002056:	d05a      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x15a>
 8002058:	e062      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6899      	ldr	r1, [r3, #8]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f000 f9b7 	bl	80023dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800207c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	609a      	str	r2, [r3, #8]
      break;
 8002086:	e04f      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f000 f9a0 	bl	80023dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020aa:	609a      	str	r2, [r3, #8]
      break;
 80020ac:	e03c      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	461a      	mov	r2, r3
 80020bc:	f000 f914 	bl	80022e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2150      	movs	r1, #80	; 0x50
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f96d 	bl	80023a6 <TIM_ITRx_SetConfig>
      break;
 80020cc:	e02c      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6859      	ldr	r1, [r3, #4]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	461a      	mov	r2, r3
 80020dc:	f000 f933 	bl	8002346 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2160      	movs	r1, #96	; 0x60
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f95d 	bl	80023a6 <TIM_ITRx_SetConfig>
      break;
 80020ec:	e01c      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f000 f8f4 	bl	80022e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2140      	movs	r1, #64	; 0x40
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f94d 	bl	80023a6 <TIM_ITRx_SetConfig>
      break;
 800210c:	e00c      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f000 f944 	bl	80023a6 <TIM_ITRx_SetConfig>
      break;
 800211e:	e003      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]
      break;
 8002124:	e000      	b.n	8002128 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a40      	ldr	r2, [pc, #256]	; (80022bc <TIM_Base_SetConfig+0x114>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d013      	beq.n	80021e8 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c6:	d00f      	beq.n	80021e8 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a3d      	ldr	r2, [pc, #244]	; (80022c0 <TIM_Base_SetConfig+0x118>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d00b      	beq.n	80021e8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a3c      	ldr	r2, [pc, #240]	; (80022c4 <TIM_Base_SetConfig+0x11c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d007      	beq.n	80021e8 <TIM_Base_SetConfig+0x40>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a3b      	ldr	r2, [pc, #236]	; (80022c8 <TIM_Base_SetConfig+0x120>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d003      	beq.n	80021e8 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <TIM_Base_SetConfig+0x124>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d108      	bne.n	80021fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2f      	ldr	r2, [pc, #188]	; (80022bc <TIM_Base_SetConfig+0x114>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d02b      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002208:	d027      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2c      	ldr	r2, [pc, #176]	; (80022c0 <TIM_Base_SetConfig+0x118>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d023      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2b      	ldr	r2, [pc, #172]	; (80022c4 <TIM_Base_SetConfig+0x11c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01f      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <TIM_Base_SetConfig+0x120>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d01b      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a29      	ldr	r2, [pc, #164]	; (80022cc <TIM_Base_SetConfig+0x124>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d017      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a28      	ldr	r2, [pc, #160]	; (80022d0 <TIM_Base_SetConfig+0x128>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d013      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <TIM_Base_SetConfig+0x12c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d00f      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <TIM_Base_SetConfig+0x130>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00b      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a25      	ldr	r2, [pc, #148]	; (80022dc <TIM_Base_SetConfig+0x134>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a24      	ldr	r2, [pc, #144]	; (80022e0 <TIM_Base_SetConfig+0x138>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d003      	beq.n	800225a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a23      	ldr	r2, [pc, #140]	; (80022e4 <TIM_Base_SetConfig+0x13c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d108      	bne.n	800226c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4313      	orrs	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a0a      	ldr	r2, [pc, #40]	; (80022bc <TIM_Base_SetConfig+0x114>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d003      	beq.n	80022a0 <TIM_Base_SetConfig+0xf8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <TIM_Base_SetConfig+0x124>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d103      	bne.n	80022a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	615a      	str	r2, [r3, #20]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40000800 	.word	0x40000800
 80022c8:	40000c00 	.word	0x40000c00
 80022cc:	40010400 	.word	0x40010400
 80022d0:	40014000 	.word	0x40014000
 80022d4:	40014400 	.word	0x40014400
 80022d8:	40014800 	.word	0x40014800
 80022dc:	40001800 	.word	0x40001800
 80022e0:	40001c00 	.word	0x40001c00
 80022e4:	40002000 	.word	0x40002000

080022e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0201 	bic.w	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f023 030a 	bic.w	r3, r3, #10
 8002324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	621a      	str	r2, [r3, #32]
}
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002346:	b480      	push	{r7}
 8002348:	b087      	sub	sp, #28
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f023 0210 	bic.w	r2, r3, #16
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	031b      	lsls	r3, r3, #12
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4313      	orrs	r3, r2
 800237a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	621a      	str	r2, [r3, #32]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f043 0307 	orr.w	r3, r3, #7
 80023c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	609a      	str	r2, [r3, #8]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	021a      	lsls	r2, r3, #8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	431a      	orrs	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	609a      	str	r2, [r3, #8]
}
 8002410:	bf00      	nop
 8002412:	371c      	adds	r7, #28
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002430:	2302      	movs	r3, #2
 8002432:	e05a      	b.n	80024ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800245a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a21      	ldr	r2, [pc, #132]	; (80024f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d022      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d01d      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a1d      	ldr	r2, [pc, #116]	; (80024fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d018      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1b      	ldr	r2, [pc, #108]	; (8002500 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d00e      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a18      	ldr	r2, [pc, #96]	; (8002508 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d004      	beq.n	80024be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a15      	ldr	r2, [pc, #84]	; (8002510 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10c      	bne.n	80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40000400 	.word	0x40000400
 8002500:	40000800 	.word	0x40000800
 8002504:	40000c00 	.word	0x40000c00
 8002508:	40010400 	.word	0x40010400
 800250c:	40014000 	.word	0x40014000
 8002510:	40001800 	.word	0x40001800

08002514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e03f      	b.n	80025ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d106      	bne.n	8002568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7fe fa0a 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800257e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fe1d 	bl	80031c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b08a      	sub	sp, #40	; 0x28
 80025da:	af02      	add	r7, sp, #8
 80025dc:	60f8      	str	r0, [r7, #12]
 80025de:	60b9      	str	r1, [r7, #8]
 80025e0:	603b      	str	r3, [r7, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d17c      	bne.n	80026f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d002      	beq.n	8002602 <HAL_UART_Transmit+0x2c>
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e075      	b.n	80026f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_UART_Transmit+0x3e>
 8002610:	2302      	movs	r3, #2
 8002612:	e06e      	b.n	80026f2 <HAL_UART_Transmit+0x11c>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2221      	movs	r2, #33	; 0x21
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800262a:	f7fe fafd 	bl	8000c28 <HAL_GetTick>
 800262e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	88fa      	ldrh	r2, [r7, #6]
 8002634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	88fa      	ldrh	r2, [r7, #6]
 800263a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002644:	d108      	bne.n	8002658 <HAL_UART_Transmit+0x82>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	e003      	b.n	8002660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002668:	e02a      	b.n	80026c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2200      	movs	r2, #0
 8002672:	2180      	movs	r1, #128	; 0x80
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fb9b 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e036      	b.n	80026f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10b      	bne.n	80026a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	3302      	adds	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	e007      	b.n	80026b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	3301      	adds	r3, #1
 80026b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1cf      	bne.n	800266a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2200      	movs	r2, #0
 80026d2:	2140      	movs	r1, #64	; 0x40
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f000 fb6b 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e006      	b.n	80026f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e000      	b.n	80026f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80026f0:	2302      	movs	r3, #2
  }
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3720      	adds	r7, #32
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b08a      	sub	sp, #40	; 0x28
 80026fe:	af02      	add	r7, sp, #8
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b20      	cmp	r3, #32
 8002718:	f040 808c 	bne.w	8002834 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_UART_Receive+0x2e>
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e084      	b.n	8002836 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_UART_Receive+0x40>
 8002736:	2302      	movs	r3, #2
 8002738:	e07d      	b.n	8002836 <HAL_UART_Receive+0x13c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2222      	movs	r2, #34	; 0x22
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002756:	f7fe fa67 	bl	8000c28 <HAL_GetTick>
 800275a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002770:	d108      	bne.n	8002784 <HAL_UART_Receive+0x8a>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	e003      	b.n	800278c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002794:	e043      	b.n	800281e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	2200      	movs	r2, #0
 800279e:	2120      	movs	r1, #32
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fb05 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e042      	b.n	8002836 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	3302      	adds	r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e01f      	b.n	8002810 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d8:	d007      	beq.n	80027ea <HAL_UART_Receive+0xf0>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10a      	bne.n	80027f8 <HAL_UART_Receive+0xfe>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e008      	b.n	800280a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002804:	b2da      	uxtb	r2, r3
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1b6      	bne.n	8002796 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b0ba      	sub	sp, #232	; 0xe8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800286c:	2300      	movs	r3, #0
 800286e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800287e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10f      	bne.n	80028a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_UART_IRQHandler+0x66>
 8002892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 fbd3 	bl	800304a <UART_Receive_IT>
      return;
 80028a4:	e256      	b.n	8002d54 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 80de 	beq.w	8002a6c <HAL_UART_IRQHandler+0x22c>
 80028b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d106      	bne.n	80028ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80d1 	beq.w	8002a6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HAL_UART_IRQHandler+0xae>
 80028d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_UART_IRQHandler+0xd2>
 80028fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0202 	orr.w	r2, r3, #2
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_UART_IRQHandler+0xf6>
 800291e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f043 0204 	orr.w	r2, r3, #4
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d011      	beq.n	8002966 <HAL_UART_IRQHandler+0x126>
 8002942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b00      	cmp	r3, #0
 800294c:	d105      	bne.n	800295a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800294e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f043 0208 	orr.w	r2, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 81ed 	beq.w	8002d4a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_UART_IRQHandler+0x14e>
 800297c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002980:	f003 0320 	and.w	r3, r3, #32
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fb5e 	bl	800304a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b40      	cmp	r3, #64	; 0x40
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <HAL_UART_IRQHandler+0x17a>
 80029b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d04f      	beq.n	8002a5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 fa66 	bl	8002e8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d141      	bne.n	8002a52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3314      	adds	r3, #20
 80029d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3314      	adds	r3, #20
 80029f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a0a:	e841 2300 	strex	r3, r2, [r1]
 8002a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1d9      	bne.n	80029ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d013      	beq.n	8002a4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	4a7d      	ldr	r2, [pc, #500]	; (8002c1c <HAL_UART_IRQHandler+0x3dc>)
 8002a28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe faab 	bl	8000f8a <HAL_DMA_Abort_IT>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d016      	beq.n	8002a68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a44:	4610      	mov	r0, r2
 8002a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a48:	e00e      	b.n	8002a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f99a 	bl	8002d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a50:	e00a      	b.n	8002a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f996 	bl	8002d84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a58:	e006      	b.n	8002a68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f992 	bl	8002d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a66:	e170      	b.n	8002d4a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a68:	bf00      	nop
    return;
 8002a6a:	e16e      	b.n	8002d4a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 814a 	bne.w	8002d0a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8143 	beq.w	8002d0a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 813c 	beq.w	8002d0a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b40      	cmp	r3, #64	; 0x40
 8002ab4:	f040 80b4 	bne.w	8002c20 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ac4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8140 	beq.w	8002d4e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	f080 8139 	bcs.w	8002d4e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aee:	f000 8088 	beq.w	8002c02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	330c      	adds	r3, #12
 8002af8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b00:	e853 3f00 	ldrex	r3, [r3]
 8002b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002b1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1d9      	bne.n	8002af2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3314      	adds	r3, #20
 8002b44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b6e:	e841 2300 	strex	r3, r2, [r1]
 8002b72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1e1      	bne.n	8002b3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3314      	adds	r3, #20
 8002b9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002b9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ba0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ba4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ba6:	e841 2300 	strex	r3, r2, [r1]
 8002baa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1e3      	bne.n	8002b7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd2:	f023 0310 	bic.w	r3, r3, #16
 8002bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	330c      	adds	r3, #12
 8002be0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002be4:	65ba      	str	r2, [r7, #88]	; 0x58
 8002be6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e3      	bne.n	8002bc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe f954 	bl	8000eaa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f8c0 	bl	8002d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c18:	e099      	b.n	8002d4e <HAL_UART_IRQHandler+0x50e>
 8002c1a:	bf00      	nop
 8002c1c:	08002f53 	.word	0x08002f53
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f000 808b 	beq.w	8002d52 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002c3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8086 	beq.w	8002d52 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	330c      	adds	r3, #12
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	e853 3f00 	ldrex	r3, [r3]
 8002c54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	330c      	adds	r3, #12
 8002c66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002c6a:	647a      	str	r2, [r7, #68]	; 0x44
 8002c6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c72:	e841 2300 	strex	r3, r2, [r1]
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1e3      	bne.n	8002c46 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	e853 3f00 	ldrex	r3, [r3]
 8002c8c:	623b      	str	r3, [r7, #32]
   return(result);
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	f023 0301 	bic.w	r3, r3, #1
 8002c94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3314      	adds	r3, #20
 8002c9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ca2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e3      	bne.n	8002c7e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	e853 3f00 	ldrex	r3, [r3]
 8002cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f023 0310 	bic.w	r3, r3, #16
 8002cda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	330c      	adds	r3, #12
 8002ce4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ce8:	61fa      	str	r2, [r7, #28]
 8002cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	69b9      	ldr	r1, [r7, #24]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	e841 2300 	strex	r3, r2, [r1]
 8002cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1e3      	bne.n	8002cc4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f848 	bl	8002d98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d08:	e023      	b.n	8002d52 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_UART_IRQHandler+0x4ea>
 8002d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f929 	bl	8002f7a <UART_Transmit_IT>
    return;
 8002d28:	e014      	b.n	8002d54 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00e      	beq.n	8002d54 <HAL_UART_IRQHandler+0x514>
 8002d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f969 	bl	800301a <UART_EndTransmit_IT>
    return;
 8002d48:	e004      	b.n	8002d54 <HAL_UART_IRQHandler+0x514>
    return;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <HAL_UART_IRQHandler+0x514>
      return;
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <HAL_UART_IRQHandler+0x514>
      return;
 8002d52:	bf00      	nop
  }
}
 8002d54:	37e8      	adds	r7, #232	; 0xe8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop

08002d5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b090      	sub	sp, #64	; 0x40
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc0:	e050      	b.n	8002e64 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d04c      	beq.n	8002e64 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d007      	beq.n	8002de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dd0:	f7fd ff2a 	bl	8000c28 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d241      	bcs.n	8002e64 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dea:	e853 3f00 	ldrex	r3, [r3]
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e00:	637a      	str	r2, [r7, #52]	; 0x34
 8002e02:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e5      	bne.n	8002de0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3314      	adds	r3, #20
 8002e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	613b      	str	r3, [r7, #16]
   return(result);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e34:	623a      	str	r2, [r7, #32]
 8002e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e38:	69f9      	ldr	r1, [r7, #28]
 8002e3a:	6a3a      	ldr	r2, [r7, #32]
 8002e3c:	e841 2300 	strex	r3, r2, [r1]
 8002e40:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e5      	bne.n	8002e14 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e00f      	b.n	8002e84 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d09f      	beq.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3740      	adds	r7, #64	; 0x40
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b095      	sub	sp, #84	; 0x54
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eb4:	643a      	str	r2, [r7, #64]	; 0x40
 8002eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ebc:	e841 2300 	strex	r3, r2, [r1]
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1e5      	bne.n	8002e94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3314      	adds	r3, #20
 8002ece:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3314      	adds	r3, #20
 8002ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ee8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ef0:	e841 2300 	strex	r3, r2, [r1]
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1e5      	bne.n	8002ec8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d119      	bne.n	8002f38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f023 0310 	bic.w	r3, r3, #16
 8002f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	330c      	adds	r3, #12
 8002f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f24:	61ba      	str	r2, [r7, #24]
 8002f26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6979      	ldr	r1, [r7, #20]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	613b      	str	r3, [r7, #16]
   return(result);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e5      	bne.n	8002f04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f46:	bf00      	nop
 8002f48:	3754      	adds	r7, #84	; 0x54
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff ff09 	bl	8002d84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b21      	cmp	r3, #33	; 0x21
 8002f8c:	d13e      	bne.n	800300c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f96:	d114      	bne.n	8002fc2 <UART_Transmit_IT+0x48>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d110      	bne.n	8002fc2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	621a      	str	r2, [r3, #32]
 8002fc0:	e008      	b.n	8002fd4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	1c59      	adds	r1, r3, #1
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6211      	str	r1, [r2, #32]
 8002fcc:	781a      	ldrb	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10f      	bne.n	8003008 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ff6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003006:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b082      	sub	sp, #8
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003030:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fe8e 	bl	8002d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b08c      	sub	sp, #48	; 0x30
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b22      	cmp	r3, #34	; 0x22
 800305c:	f040 80ab 	bne.w	80031b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003068:	d117      	bne.n	800309a <UART_Receive_IT+0x50>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d113      	bne.n	800309a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003072:	2300      	movs	r3, #0
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b29b      	uxth	r3, r3
 8003084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003088:	b29a      	uxth	r2, r3
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	1c9a      	adds	r2, r3, #2
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
 8003098:	e026      	b.n	80030e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ac:	d007      	beq.n	80030be <UART_Receive_IT+0x74>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <UART_Receive_IT+0x82>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e008      	b.n	80030de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4619      	mov	r1, r3
 80030f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d15a      	bne.n	80031b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0220 	bic.w	r2, r2, #32
 800310a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800311a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	2b01      	cmp	r3, #1
 800313a:	d135      	bne.n	80031a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	330c      	adds	r3, #12
 8003148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	613b      	str	r3, [r7, #16]
   return(result);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f023 0310 	bic.w	r3, r3, #16
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	330c      	adds	r3, #12
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	623a      	str	r2, [r7, #32]
 8003164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	69f9      	ldr	r1, [r7, #28]
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b10      	cmp	r3, #16
 8003182:	d10a      	bne.n	800319a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fdf9 	bl	8002d98 <HAL_UARTEx_RxEventCallback>
 80031a6:	e002      	b.n	80031ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fde1 	bl	8002d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e002      	b.n	80031b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
  }
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3730      	adds	r7, #48	; 0x30
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031c4:	b09f      	sub	sp, #124	; 0x7c
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80031d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d6:	68d9      	ldr	r1, [r3, #12]
 80031d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	ea40 0301 	orr.w	r3, r0, r1
 80031e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80031fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003204:	f021 010c 	bic.w	r1, r1, #12
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800320e:	430b      	orrs	r3, r1
 8003210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800321c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321e:	6999      	ldr	r1, [r3, #24]
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	ea40 0301 	orr.w	r3, r0, r1
 8003228:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800322a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4bc5      	ldr	r3, [pc, #788]	; (8003544 <UART_SetConfig+0x384>)
 8003230:	429a      	cmp	r2, r3
 8003232:	d004      	beq.n	800323e <UART_SetConfig+0x7e>
 8003234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4bc3      	ldr	r3, [pc, #780]	; (8003548 <UART_SetConfig+0x388>)
 800323a:	429a      	cmp	r2, r3
 800323c:	d103      	bne.n	8003246 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800323e:	f7fe fcdd 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8003242:	6778      	str	r0, [r7, #116]	; 0x74
 8003244:	e002      	b.n	800324c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003246:	f7fe fcc5 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 800324a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800324c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003254:	f040 80b6 	bne.w	80033c4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325a:	461c      	mov	r4, r3
 800325c:	f04f 0500 	mov.w	r5, #0
 8003260:	4622      	mov	r2, r4
 8003262:	462b      	mov	r3, r5
 8003264:	1891      	adds	r1, r2, r2
 8003266:	6439      	str	r1, [r7, #64]	; 0x40
 8003268:	415b      	adcs	r3, r3
 800326a:	647b      	str	r3, [r7, #68]	; 0x44
 800326c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003270:	1912      	adds	r2, r2, r4
 8003272:	eb45 0303 	adc.w	r3, r5, r3
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	00d9      	lsls	r1, r3, #3
 8003280:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003284:	00d0      	lsls	r0, r2, #3
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	1911      	adds	r1, r2, r4
 800328c:	6639      	str	r1, [r7, #96]	; 0x60
 800328e:	416b      	adcs	r3, r5
 8003290:	667b      	str	r3, [r7, #100]	; 0x64
 8003292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	461a      	mov	r2, r3
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	1891      	adds	r1, r2, r2
 800329e:	63b9      	str	r1, [r7, #56]	; 0x38
 80032a0:	415b      	adcs	r3, r3
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032a8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80032ac:	f7fc ff94 	bl	80001d8 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4ba5      	ldr	r3, [pc, #660]	; (800354c <UART_SetConfig+0x38c>)
 80032b6:	fba3 2302 	umull	r2, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	011e      	lsls	r6, r3, #4
 80032be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032c0:	461c      	mov	r4, r3
 80032c2:	f04f 0500 	mov.w	r5, #0
 80032c6:	4622      	mov	r2, r4
 80032c8:	462b      	mov	r3, r5
 80032ca:	1891      	adds	r1, r2, r2
 80032cc:	6339      	str	r1, [r7, #48]	; 0x30
 80032ce:	415b      	adcs	r3, r3
 80032d0:	637b      	str	r3, [r7, #52]	; 0x34
 80032d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80032d6:	1912      	adds	r2, r2, r4
 80032d8:	eb45 0303 	adc.w	r3, r5, r3
 80032dc:	f04f 0000 	mov.w	r0, #0
 80032e0:	f04f 0100 	mov.w	r1, #0
 80032e4:	00d9      	lsls	r1, r3, #3
 80032e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032ea:	00d0      	lsls	r0, r2, #3
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	1911      	adds	r1, r2, r4
 80032f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80032f4:	416b      	adcs	r3, r5
 80032f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	1891      	adds	r1, r2, r2
 8003304:	62b9      	str	r1, [r7, #40]	; 0x28
 8003306:	415b      	adcs	r3, r3
 8003308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800330a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800330e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003312:	f7fc ff61 	bl	80001d8 <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4b8c      	ldr	r3, [pc, #560]	; (800354c <UART_SetConfig+0x38c>)
 800331c:	fba3 1302 	umull	r1, r3, r3, r2
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	2164      	movs	r1, #100	; 0x64
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	3332      	adds	r3, #50	; 0x32
 800332e:	4a87      	ldr	r2, [pc, #540]	; (800354c <UART_SetConfig+0x38c>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800333c:	441e      	add	r6, r3
 800333e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003340:	4618      	mov	r0, r3
 8003342:	f04f 0100 	mov.w	r1, #0
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	1894      	adds	r4, r2, r2
 800334c:	623c      	str	r4, [r7, #32]
 800334e:	415b      	adcs	r3, r3
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
 8003352:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003356:	1812      	adds	r2, r2, r0
 8003358:	eb41 0303 	adc.w	r3, r1, r3
 800335c:	f04f 0400 	mov.w	r4, #0
 8003360:	f04f 0500 	mov.w	r5, #0
 8003364:	00dd      	lsls	r5, r3, #3
 8003366:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800336a:	00d4      	lsls	r4, r2, #3
 800336c:	4622      	mov	r2, r4
 800336e:	462b      	mov	r3, r5
 8003370:	1814      	adds	r4, r2, r0
 8003372:	653c      	str	r4, [r7, #80]	; 0x50
 8003374:	414b      	adcs	r3, r1
 8003376:	657b      	str	r3, [r7, #84]	; 0x54
 8003378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	461a      	mov	r2, r3
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	1891      	adds	r1, r2, r2
 8003384:	61b9      	str	r1, [r7, #24]
 8003386:	415b      	adcs	r3, r3
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800338e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003392:	f7fc ff21 	bl	80001d8 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4b6c      	ldr	r3, [pc, #432]	; (800354c <UART_SetConfig+0x38c>)
 800339c:	fba3 1302 	umull	r1, r3, r3, r2
 80033a0:	095b      	lsrs	r3, r3, #5
 80033a2:	2164      	movs	r1, #100	; 0x64
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	3332      	adds	r3, #50	; 0x32
 80033ae:	4a67      	ldr	r2, [pc, #412]	; (800354c <UART_SetConfig+0x38c>)
 80033b0:	fba2 2303 	umull	r2, r3, r2, r3
 80033b4:	095b      	lsrs	r3, r3, #5
 80033b6:	f003 0207 	and.w	r2, r3, #7
 80033ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4432      	add	r2, r6
 80033c0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033c2:	e0b9      	b.n	8003538 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c6:	461c      	mov	r4, r3
 80033c8:	f04f 0500 	mov.w	r5, #0
 80033cc:	4622      	mov	r2, r4
 80033ce:	462b      	mov	r3, r5
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	6139      	str	r1, [r7, #16]
 80033d4:	415b      	adcs	r3, r3
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033dc:	1912      	adds	r2, r2, r4
 80033de:	eb45 0303 	adc.w	r3, r5, r3
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f04f 0100 	mov.w	r1, #0
 80033ea:	00d9      	lsls	r1, r3, #3
 80033ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033f0:	00d0      	lsls	r0, r2, #3
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	eb12 0804 	adds.w	r8, r2, r4
 80033fa:	eb43 0905 	adc.w	r9, r3, r5
 80033fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f04f 0100 	mov.w	r1, #0
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	008b      	lsls	r3, r1, #2
 8003412:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003416:	0082      	lsls	r2, r0, #2
 8003418:	4640      	mov	r0, r8
 800341a:	4649      	mov	r1, r9
 800341c:	f7fc fedc 	bl	80001d8 <__aeabi_uldivmod>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4b49      	ldr	r3, [pc, #292]	; (800354c <UART_SetConfig+0x38c>)
 8003426:	fba3 2302 	umull	r2, r3, r3, r2
 800342a:	095b      	lsrs	r3, r3, #5
 800342c:	011e      	lsls	r6, r3, #4
 800342e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003430:	4618      	mov	r0, r3
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	1894      	adds	r4, r2, r2
 800343c:	60bc      	str	r4, [r7, #8]
 800343e:	415b      	adcs	r3, r3
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003446:	1812      	adds	r2, r2, r0
 8003448:	eb41 0303 	adc.w	r3, r1, r3
 800344c:	f04f 0400 	mov.w	r4, #0
 8003450:	f04f 0500 	mov.w	r5, #0
 8003454:	00dd      	lsls	r5, r3, #3
 8003456:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800345a:	00d4      	lsls	r4, r2, #3
 800345c:	4622      	mov	r2, r4
 800345e:	462b      	mov	r3, r5
 8003460:	1814      	adds	r4, r2, r0
 8003462:	64bc      	str	r4, [r7, #72]	; 0x48
 8003464:	414b      	adcs	r3, r1
 8003466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4618      	mov	r0, r3
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	008b      	lsls	r3, r1, #2
 800347c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003480:	0082      	lsls	r2, r0, #2
 8003482:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003486:	f7fc fea7 	bl	80001d8 <__aeabi_uldivmod>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <UART_SetConfig+0x38c>)
 8003490:	fba3 1302 	umull	r1, r3, r3, r2
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	2164      	movs	r1, #100	; 0x64
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	3332      	adds	r3, #50	; 0x32
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <UART_SetConfig+0x38c>)
 80034a4:	fba2 2303 	umull	r2, r3, r2, r3
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ae:	441e      	add	r6, r3
 80034b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b2:	4618      	mov	r0, r3
 80034b4:	f04f 0100 	mov.w	r1, #0
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	1894      	adds	r4, r2, r2
 80034be:	603c      	str	r4, [r7, #0]
 80034c0:	415b      	adcs	r3, r3
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c8:	1812      	adds	r2, r2, r0
 80034ca:	eb41 0303 	adc.w	r3, r1, r3
 80034ce:	f04f 0400 	mov.w	r4, #0
 80034d2:	f04f 0500 	mov.w	r5, #0
 80034d6:	00dd      	lsls	r5, r3, #3
 80034d8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034dc:	00d4      	lsls	r4, r2, #3
 80034de:	4622      	mov	r2, r4
 80034e0:	462b      	mov	r3, r5
 80034e2:	eb12 0a00 	adds.w	sl, r2, r0
 80034e6:	eb43 0b01 	adc.w	fp, r3, r1
 80034ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	008b      	lsls	r3, r1, #2
 80034fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003502:	0082      	lsls	r2, r0, #2
 8003504:	4650      	mov	r0, sl
 8003506:	4659      	mov	r1, fp
 8003508:	f7fc fe66 	bl	80001d8 <__aeabi_uldivmod>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	4b0e      	ldr	r3, [pc, #56]	; (800354c <UART_SetConfig+0x38c>)
 8003512:	fba3 1302 	umull	r1, r3, r3, r2
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2164      	movs	r1, #100	; 0x64
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	4a09      	ldr	r2, [pc, #36]	; (800354c <UART_SetConfig+0x38c>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	f003 020f 	and.w	r2, r3, #15
 8003530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4432      	add	r2, r6
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	bf00      	nop
 800353a:	377c      	adds	r7, #124	; 0x7c
 800353c:	46bd      	mov	sp, r7
 800353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003542:	bf00      	nop
 8003544:	40011000 	.word	0x40011000
 8003548:	40011400 	.word	0x40011400
 800354c:	51eb851f 	.word	0x51eb851f

08003550 <__libc_init_array>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	4d0d      	ldr	r5, [pc, #52]	; (8003588 <__libc_init_array+0x38>)
 8003554:	4c0d      	ldr	r4, [pc, #52]	; (800358c <__libc_init_array+0x3c>)
 8003556:	1b64      	subs	r4, r4, r5
 8003558:	10a4      	asrs	r4, r4, #2
 800355a:	2600      	movs	r6, #0
 800355c:	42a6      	cmp	r6, r4
 800355e:	d109      	bne.n	8003574 <__libc_init_array+0x24>
 8003560:	4d0b      	ldr	r5, [pc, #44]	; (8003590 <__libc_init_array+0x40>)
 8003562:	4c0c      	ldr	r4, [pc, #48]	; (8003594 <__libc_init_array+0x44>)
 8003564:	f000 f820 	bl	80035a8 <_init>
 8003568:	1b64      	subs	r4, r4, r5
 800356a:	10a4      	asrs	r4, r4, #2
 800356c:	2600      	movs	r6, #0
 800356e:	42a6      	cmp	r6, r4
 8003570:	d105      	bne.n	800357e <__libc_init_array+0x2e>
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	f855 3b04 	ldr.w	r3, [r5], #4
 8003578:	4798      	blx	r3
 800357a:	3601      	adds	r6, #1
 800357c:	e7ee      	b.n	800355c <__libc_init_array+0xc>
 800357e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003582:	4798      	blx	r3
 8003584:	3601      	adds	r6, #1
 8003586:	e7f2      	b.n	800356e <__libc_init_array+0x1e>
 8003588:	08003610 	.word	0x08003610
 800358c:	08003610 	.word	0x08003610
 8003590:	08003610 	.word	0x08003610
 8003594:	08003614 	.word	0x08003614

08003598 <memset>:
 8003598:	4402      	add	r2, r0
 800359a:	4603      	mov	r3, r0
 800359c:	4293      	cmp	r3, r2
 800359e:	d100      	bne.n	80035a2 <memset+0xa>
 80035a0:	4770      	bx	lr
 80035a2:	f803 1b01 	strb.w	r1, [r3], #1
 80035a6:	e7f9      	b.n	800359c <memset+0x4>

080035a8 <_init>:
 80035a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035aa:	bf00      	nop
 80035ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ae:	bc08      	pop	{r3}
 80035b0:	469e      	mov	lr, r3
 80035b2:	4770      	bx	lr

080035b4 <_fini>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	bf00      	nop
 80035b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ba:	bc08      	pop	{r3}
 80035bc:	469e      	mov	lr, r3
 80035be:	4770      	bx	lr
